library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
thousand_formatter <- function(x) {#
	label <- x / 1000#
}#
#
p <- p + scale_y_continuous(#
	label = thousand_formatter#
	)#
#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- funciton(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	label = thousand_formatter#
	)#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	label = thousand_formatter#
	)#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,500),#
	label = thousand_formatter#
	)#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,0),#
	label = thousand_formatter#
	)#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,20), # removes padding at bottom#
	label = thousand_formatter#
	)#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,20), # removes padding at bottom#
	label = thousand_formatter#
	)#
#
p <- p + theme(axis.title.x = element())#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,20), # removes padding at bottom#
	label = thousand_formatter#
	)#
#
p <- p + theme(axis.title.x = element())#
p <- p + theme(axis.title.y = element())#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,20), # removes padding at bottom#
	label = thousand_formatter#
	)#
#
p <- p + theme(axis.title.x = element_blank())#
p <- p + theme(axis.title.y = element_blank())#
p <- p + theme(legend.position = "none")#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,20), # removes padding at bottom#
	label = thousand_formatter#
	)#
#
p <- p + theme(axis.title.x = element_blank())#
p <- p + theme(axis.title.y = element_blank())#
p <- p + theme(legend.position = "none")#
p <- p + theme(axis.ticks.x = element_blank())#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,20), # removes padding at bottom#
	label = thousand_formatter#
	)#
#
p <- p + theme(axis.title.x = element_blank())#
p <- p + theme(axis.title.y = element_blank())#
p <- p + theme(legend.position = "none")#
p <- p + theme(axis.ticks.x = element_blank())#
p <- p + theme(panel.grid.major.x = element_blank())#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,20), # removes padding at bottom#
	label = thousand_formatter#
	)#
#
p <- p + theme(axis.title.x = element_blank())#
p <- p + theme(axis.title.y = element_blank())#
p <- p + theme(legend.position = "none")#
p <- p + theme(axis.ticks.x = element_blank())#
p <- p + theme(panel.grid.major.x = element_blank())#
p <- p + theme(panel.grid.minor.y = element_blank())#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,40), # removes padding at bottom#
	label = thousand_formatter#
	)#
#
p <- p + theme(axis.title.x = element_blank())#
p <- p + theme(axis.title.y = element_blank())#
p <- p + theme(legend.position = "none")#
p <- p + theme(axis.ticks.x = element_blank())#
p <- p + theme(panel.grid.major.x = element_blank())#
p <- p + theme(panel.grid.minor.y = element_blank())#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,500), # removes padding at bottom#
	label = thousand_formatter#
	)#
#
p <- p + theme(axis.title.x = element_blank())#
p <- p + theme(axis.title.y = element_blank())#
p <- p + theme(legend.position = "none")#
p <- p + theme(axis.ticks.x = element_blank())#
p <- p + theme(panel.grid.major.x = element_blank())#
p <- p + theme(panel.grid.minor.y = element_blank())#
p <- p + theme(axis.text.x = element_text(size=12))#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,200), # removes padding at bottom#
	label = thousand_formatter#
	)#
#
p <- p + theme(axis.title.x = element_blank())#
p <- p + theme(axis.title.y = element_blank())#
p <- p + theme(legend.position = "none")#
p <- p + theme(axis.ticks.x = element_blank())#
p <- p + theme(panel.grid.major.x = element_blank())#
p <- p + theme(panel.grid.minor.y = element_blank())#
p <- p + theme(axis.text.x = element_text(size=12))#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,200), # removes padding at bottom#
	label = thousand_formatter#
	)#
#
p <- p + theme(axis.title.x = element_blank())#
p <- p + theme(axis.title.y = element_blank())#
p <- p + theme(legend.position = "none")#
p <- p + theme(axis.ticks.x = element_blank())#
p <- p + theme(panel.grid.major.x = element_blank())#
p <- p + theme(panel.grid.minor.y = element_blank())#
p <- p + theme(axis.text.x = element_text(size=12))#
p <- p + scale_color_brewer(type = "qual", palette = "Set3")#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,200), # removes padding at bottom#
	label = thousand_formatter#
	)#
#
p <- p + theme(axis.title.x = element_blank())#
p <- p + theme(axis.title.y = element_blank())#
p <- p + theme(legend.position = "none")#
p <- p + theme(axis.ticks.x = element_blank())#
p <- p + theme(panel.grid.major.x = element_blank())#
p <- p + theme(panel.grid.minor.y = element_blank())#
p <- p + theme(axis.text.x = element_text(size=12))#
p <- p + scale_fill_brewer(type = "qual", palette = "Set3")#
print(p)
library(ggplot2)#
library(shiny)#
#
data("movies", package = "ggplot2")#
#
start <- which(colnames(movies) == "Action")#
#
end <- which (colnames(movies) == "Short")#
#
genres <- colnames(movies)[start:end]#
#
counts <- rep(0, length(genres))#
#
for(i in 1:length(genres)) {#
	counts[i] <- sum(movies[, genres[i]])#
}#
#
df <- data.frame(factor(genres), counts)#
colnames(df) <- c("Genres", "Counts")#
#
## How to Sort by Bars#
sortOrder <- order(df$Counts, decreasing = FALSE)#
df$Genres <- factor(df$Genres, levels = df$Genres[sortOrder])#
#
p <- ggplot(df, aes(x = Genres, y = Counts, fill = Genres, color = "red"))#
#
p <- p + geom_bar(stat="identity")#
#
p <- p + xlab("Movie Genre")#
p <- p + ylab("Count in 1000s")#
p <- p + ggtitle("Movies by Genre")#
p <- p + labs(fill = "Movie Genres")#
#
##thousand_formatter <- function(x) {#
##	label <- x / 1000#
##}#
#
thousand_formatter <- function(x) {#
	return(sprintf("%dk", round(x / 1000))) # d is digit, f would be floating#
}#
p <- p + scale_y_continuous(#
	expand = c(0,200), # removes padding at bottom#
	label = thousand_formatter#
	)#
#
p <- p + theme(axis.title.x = element_blank())#
p <- p + theme(axis.title.y = element_blank())#
p <- p + theme(legend.position = "none")#
p <- p + theme(axis.ticks.x = element_blank())#
p <- p + theme(panel.grid.major.x = element_blank())#
p <- p + theme(panel.grid.minor.y = element_blank())#
p <- p + theme(axis.text.x = element_text(size=12))#
p <- p + scale_fill_brewer(type = "qual", palette = "Set3")#
#
palette1 <- c("...")#
p <- p + scale_fill_manual(value = "palette1")#
#
p <- p + scale_fill_grey(start = 0.4 end 0.4)#
print(p)
if (!require("devtools"))#
  install.packages("devtools")#
devtools::install_github("shiny", "rstudio")
library()
Server File#
# library(ggplot2)#
# library(shiny)#
#
# shinyServer(function(input, output) {#
	# localFrame <- globalData #copy of global#
	# sortOrder <- reactive({#
		# if (input$sortColumn == "Genre") {#
			# return(#
				# order(localFrame$Genre,#
					# descending = input$sortDescending))#
		# }#
		# else {#
			# return(#
				# )#
		# }#
	# })#
	# output$scatterPlot <- renderPlot({#
		# scatterPlot <- getPlot(localFrame, sortOrder(), ""None"") #getPlot function#
		# print(scatterPlot)#
	# })#
## Jeremy Gilmore#
## MSAN 622#
#
## Homework 2#
#
library(ggplot2)#
library(scales)#
data(movies)#
#
## modify data: movies#
movies=movies[which(!movies$budget<=0 & !movies$mpaa==""),]#
genre <- rep(NA, nrow(movies))#
count <- rowSums(movies[, 18:24])#
genre[which(count > 1)] = "Mixed"#
genre[which(count < 1)] = "None"#
genre[which(count == 1 & movies$Action == 1)] = "Action"#
genre[which(count == 1 & movies$Animation == 1)] = "Animation"#
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"#
genre[which(count == 1 & movies$Drama == 1)] = "Drama"#
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"#
genre[which(count == 1 & movies$Romance == 1)] = "Romance"#
genre[which(count == 1 & movies$Short == 1)] = "Short"#
movies$Genre<-genre#
#
million_formatter <- function(x) {#
	#label <- round(x / 1000000)#
	return(sprintf("$%sM", round(x / 1000000)))#
}#
#
getPlot <- function(alphaVal,genreVal,mpaaVal,pointVal,colorScheme) {#
	subMovies <- subset(movies, (movies$Genre %in% genreVal) & (movies$mpaa %in% mpaaVal), c(budget, mpaa, rating))#
	MPAA <- factor(subMovies$mpaa, levels=c("PG", "PG-13", "R", "NC-17"))#
#
	assign("subMovies", subMovies, envir=globalenv())#
	assign("MPAA", MPAA, envir=globalenv())#
	p <- ggplot(subMovies,#
		aes(x= subMovies$budget, y= subMovies$rating,#
		colour=MPAA)) +#
		geom_point(alpha=alphaVal, shape=20, size=pointVal) +#
		scale_y_continuous(breaks=seq(0,10,1), labels=seq(0,10,1)) +#
		scale_x_continuous(label = million_formatter) +#
		theme(legend.position="bottom") +#
		ggtitle("IMDB Movies Data") +#
		xlab("Budget in Millions of USD") +#
		ylab("IMDB Ratings")#
#
	if (colorScheme == "Default") {#
		p <- p#
	}#
	else {#
		p <- p + scale_color_brewer(palette = colorScheme)#
	}#
	return(p)#
}#
shinyServer(function(input, output) {#
	cat("Press \"ESC\" to exit...\n")#
#
	alphaVal <- reactive ({#
		input$alphaVals#
	})#
	genreVal <- reactive ({#
		input$genreVals#
	})#
	mpaaVal <- reactive ({#
		input$mpaaVals#
	})#
	pointVal <- reactive ({#
		input$pointVals#
	})#
	colorScheme <- reactive ({#
		input$colorSchemes#
	})#
#
	output$scatterPlot <- renderPlot ({#
		print(getPlot(alphaVal,genreVal,mpaaVal,pointVal,colorScheme))#
	})#
})
Iris dataset#
#
# Shiny example 3#
#
data("iris")#
#
p <- ggplot(iris, aes(x = Sepal.Length,#
						y = Sepal.Width,#
						color = Species))#
p <- geom_point(size=4)#
print(p)
p <- ggplot(iris, aes(x = Sepal.Length,
Iris dataset#
#
# Shiny example 3#
#
data("iris")#
#
p <- ggplot(iris, aes(x = Sepal.Length,#
						y = Sepal.Width,#
						color = Species))#
p <- geom_point(size=4)#
print(p)
Iris dataset#
#
# Shiny example 3#
#
data("iris")#
#
p <- ggplot(iris, aes(x = Sepal.Length,#
						y = Sepal.Width,#
						color = Species)))#
p <- geom_point(size=4)#
print(p)
Iris dataset#
#
# Shiny example 3#
#
data("iris")#
#
p <- ggplot(iris, aes(x = Sepal.Length,#
						y = Sepal.Width,#
						color = Species))#
p <- geom_point(size=4)#
print(p)
Iris dataset#
#
# Shiny example 3#
#
data("iris")#
#
p <- ggplot(iris, aes(x = Sepal.Length,#
						y = Sepal.Width,#
						color = Species))#
p <- p + geom_point(size=4)#
print(p)
Iris dataset#
#
# Shiny example 3#
library(ggplot2)#
#
data("iris")#
#
p <- ggplot(iris, aes(x = Sepal.Length,#
						y = Sepal.Width,#
						color = Species))#
p <- p + geom_point(size=4)#
print(p)
Jeremy Gilmore#
## MSAN 622#
#
## Homework 2#
#
library(ggplot2)#
library(shiny)#
library(scales)#
data(movies)#
movies=movies[which(!movies$budget<=0 & !movies$mpaa==""),]#
genre <- rep(NA, nrow(movies))#
count <- rowSums(movies[, 18:24])#
genre[which(count > 1)] = "Mixed"#
genre[which(count < 1)] = "None"#
genre[which(count == 1 & movies$Action == 1)] = "Action"#
genre[which(count == 1 & movies$Animation == 1)] = "Animation"#
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"#
genre[which(count == 1 & movies$Drama == 1)] = "Drama"#
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"#
genre[which(count == 1 & movies$Romance == 1)] = "Romance"#
genre[which(count == 1 & movies$Short == 1)] = "Short"#
movies$Genre<-genre#
#
million_formatter <- function(x) {#
	#label <- round(x / 1000000)#
	return(sprintf("$%sM", round(x / 1000000)))#
}#
#
getPlot <- function(alphaVal,genreVal,mpaaVal,pointVal,colorScheme) {#
	subMovies <- subset(movies, (movies$Genre %in% genreVal) & (movies$mpaa %in% mpaaVal), c(budget, mpaa, rating))#
	MPAA <- factor(subMovies$mpaa, levels=c("PG", "PG-13", "R", "NC-17"))#
#
	assign("subMovies", subMovies, envir=globalenv())#
	assign("MPAA", MPAA, envir=globalenv())#
	p <- ggplot(subMovies,#
		aes(x= subMovies$budget, y= subMovies$rating,#
		colour=MPAA)) +#
		geom_point(alpha=alphaVal, shape=20, size=pointVal) +#
		scale_y_continuous(breaks=seq(0,10,1), labels=seq(0,10,1)) +#
		scale_x_continuous(label = million_formatter) +#
		theme(legend.position="bottom") +#
		ggtitle("IMDB Movies Data") +#
		xlab("Budget in Millions of USD") +#
		ylab("IMDB Ratings")#
#
	if (colorScheme == "Default") {#
		p <- p#
	}#
	else {#
		p <- p + scale_color_brewer(palette = colorScheme)#
	}#
	return(p)#
}#
#
shinyServer(function(input, output) {#
	cat("Press \"ESC\" to exit...\n")#
#
	mpaaValS <- reactive ({#
		if (input$mpaaVal == "All") {#
			result <- c("PG", "PG-13", "R", "NC-17")#
			return(result)#
		}#
		else {#
			return(input$mpaaVal)#
		}#
	})#
#
	genreValS <- reactive ({#
		if(length(input$genreVal) == 0) {#
			result <- c("Action", "Animation", "Comedy", "Documentary", 					"Drama", "Romance", "Short")#
			return(result)#
		}#
		else {#
			return(input$genreVal)#
		}#
	})#
#
	# mpaaVal <- reactive ({#
		# input$mpaaVals#
	# })#
	# pointVal <- reactive ({#
		# input$pointVals#
	# })#
	# colorScheme <- reactive ({#
		# input$colorSchemes#
	# })#
#
	output$scatterPlot <- renderPlot ({#
		scatterPlot <- getPlot(input$alphaVal, (genreValS()), (mpaaValS()), 			input$pointVal, input$colorScheme)#
		print(scatterPlot)#
	})#
})
runApp()
update.packages(shiny)
update.packages(Shiny)
library()
update.packages("shiny")
library(shiny)
shiny::runGitHub('msan622', 'j-gilmore', 'homework2')
library(ggplot2)#
library(grid)#
#
data("iris")#
#
df <- iris#
#
p <- ggplot(df, aes(#
	x = Sepal.Length#
	y = Sepal.Width#
	color = Species#
	size = Petal.Length#
	))#
#
p <- p + geom_point(alpha = 0.6, position = "jitter")#
p <- p + scale_size_area(max_size=10)#
#
print(p)
library(ggplot2)#
library(grid)#
#
data("iris")#
#
df <- iris#
#
p <- ggplot(df, aes(#
	x = Sepal.Length,#
	y = Sepal.Width,#
	color = Species,#
	size = Petal.Length#
	))#
#
p <- p + geom_point(alpha = 0.6, position = "jitter")#
p <- p + scale_size_area(max_size=10)#
#
print(p)
library(ggplot2)#
library(grid)#
#
data("iris")#
#
df <- iris[(df$Petal.Length, decreasing = TRUE),]#
#
p <- ggplot(df, aes(#
	x = Sepal.Length,#
	y = Sepal.Width,#
	color = Species,#
	size = Petal.Length#
	))#
#
p <- p + geom_point(alpha = 0.6, position = "jitter")#
p <- p + scale_size_area(max_size=10)#
#
print(p)
library(ggplot2)#
library(grid)#
#
data("iris")#
#
df <- iris[(df$Petal.Length, decreasing = TRUE),]#
#
p <- ggplot(df, aes(#
	x = Sepal.Length,#
	y = Sepal.Width,#
	color = Species,#
	size = Petal.Length#
	))#
#
p <- p + geom_point(alpha = 0.6, position = "jitter")#
p <- p + scale_size_area(max_size=10)#
#
p <- p + guides(colour = guide_legend(override.aes = list(size=8)))#
#
print(p)
Melting necessarty for heatmaps#
library(ggplot2)#
library(reshape)#
library(plyr)#
library(scales)#
# Processing Data#
processData <- function(original) {#
	processed <- original#
	colnames(processed) <- gsub("\\.", " ", colnames(processed))#
	processed <- processed[sapply(processed, is.numeric)]#
	processed <- rescaler(processed, type = "range")#
	processed$id <- 1:nrow(original)#
	processed <- melt(processed, "id")#
	processed$id <- factor(processed$id,#
		levels = 1:nrow(original), ordered = TRUE)#
	return(processed)#
}#
# possibly normalize between zero and one#
# data from 1 to 5, and from 1 to 5000 -> normalize#
#
getHeatmap <- function(dataset, midrange) {#
	p <- ggplot(dataset, aes(x = id, y = variable))#
	p <- geom_tile(aes(fill = value))#
	return(p)#
}#
#
melted < processData(iris)#
print(getheatmap(melted, c(0.4, 0.6)))
Melting necessarty for heatmaps#
library(ggplot2)#
library(reshape)#
library(plyr)#
library(scales)#
# Processing Data#
processData <- function(original) {#
	processed <- original#
	colnames(processed) <- gsub("\\.", " ", colnames(processed))#
	processed <- processed[sapply(processed, is.numeric)]#
	processed <- rescaler(processed, type = "range")#
	processed$id <- 1:nrow(original)#
	processed <- melt(processed, "id")#
	processed$id <- factor(processed$id,#
		levels = 1:nrow(original), ordered = TRUE)#
	return(processed)#
}#
# possibly normalize between zero and one#
# data from 1 to 5, and from 1 to 5000 -> normalize#
#
getHeatmap <- function(dataset, midrange) {#
	p <- ggplot(dataset, aes(x = id, y = variable))#
	p <- geom_tile(aes(fill = value))#
	return(p)#
}#
#
melted < processData(iris)#
print(getHeatmap(melted, c(0.4, 0.6)))
Melting necessarty for heatmaps#
library(ggplot2)#
library(reshape)#
library(plyr)#
library(scales)#
# Processing Data#
processData <- function(original) {#
	processed <- original#
	colnames(processed) <- gsub("\\.", " ", colnames(processed))#
	processed <- processed[sapply(processed, is.numeric)]#
	processed <- rescaler(processed, type = "range")#
	processed$id <- 1:nrow(original)#
	processed <- melt(processed, "id")#
	processed$id <- factor(processed$id,#
		levels = 1:nrow(original), ordered = TRUE)#
	return(processed)#
}#
# possibly normalize between zero and one#
# data from 1 to 5, and from 1 to 5000 -> normalize#
#
getHeatmap <- function(dataset, midrange) {#
	p <- ggplot(dataset, aes(x = id, y = variable))#
	p <- geom_tile(aes(fill = value))#
	return(p)#
}#
#
melted < processed(iris)#
print(getHeatmap(melted, c(0.4, 0.6)))
Melting necessarty for heatmaps#
library(ggplot2)#
library(reshape)#
library(plyr)#
library(scales)#
# Processing Data#
processData <- function(original) {#
	processed <- original#
	colnames(processed) <- gsub("\\.", " ", colnames(processed))#
	processed <- processed[sapply(processed, is.numeric)]#
	processed <- rescaler(processed, type = "range")#
	processed$id <- 1:nrow(original)#
	processed <- melt(processed, "id")#
	processed$id <- factor(processed$id,#
		levels = 1:nrow(original), ordered = TRUE)#
	return(processed)#
}#
# possibly normalize between zero and one#
# data from 1 to 5, and from 1 to 5000 -> normalize#
#
getHeatmap <- function(dataset, midrange) {#
	p <- ggplot(dataset, aes(x = id, y = variable))#
	p <- geom_tile(aes(fill = value))#
	return(p)#
}#
#
melted <- processData(iris)#
print(getHeatmap(melted, c(0.4, 0.6)))
if (!require(devtools))#
  install.packages("devtools")#
devtools::install_github("jcheng5/leaflet-shiny")#
shiny::runGitHub("superzip", "jcheng5")
install.packages(dplyr)
library()
?dplyr
??dplyr
install.packages(plyr)
library()
library(plyr)
shiny::runGitHub("superzip", "jcheng5")
library(shiny)
shiny::runGitHub('msan622', 'trevorstephens', subdir='homework2')
library(shiny)
shiny::runGitHub('msan622', 'ashishthakur1296', subdir='homework2')
install.packages("sqldf")
shiny::runGitHub('msan622', 'ashishthakur1296', subdir='homework2')
library(shiny)
shiny::runGitHub('msan622', 'trevorstephens', subdir='homework2')
library(shiny)
shiny::runGitHub('msan622', 'j-gilmore', 'homework3')
library(shiny)
shiny::runGitHub('msan622', 'j-gilmore', subdir= 'homework4')
x <- c(10, 25, 50, 75, 90)#
y <- c(15, 30, 80, 125, 165)#
#
plot(x,y)
x <- c(10, 25, 50, 75, 90)#
y <- c(15, 30, 100, 125, 165)#
#
plot(x,y)
library(shiny)
shiny::runGitHub('msan622', 'j-gilmore', subdir = 'homework4')
library(ggplot2)#
library(shiny)#
#
data("Seatbelts")
ls()
Seatbelts
?Seatbelts
t <- (1:nrows(seatbelts))
t <- (1:nrow(seatbelts))
t <- (1:nrow(Seatbelts))
Seatbelts$t <- t
t
times <- time(Seatbelts)
year <- floor(times)
Seatbelts
rm(list-ls())
rm(list=ls())
ls()
library(ggplot2)#
library(shiny)#
#
data("Seatbelts")#
#
times <- time(Seatbelts)#
year <- floor(times)
Seatbelts
times
year
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
#
data("Seatbelts")#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.app[cycle(times)],#
	leveles = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months#
	time = as.numeric(times),#
	dkilled = as.numeric(DriversKilled),#
	ndrivers = drivers,#
	front = front,#
	rear = rear,#
	kms = kms,#
	petrolprice = PetrolPrice,#
	vkilled = VanKilled,#
	law = law)#
#p <- ggplot(Seat)
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
#
data("Seatbelts")#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	leveles = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months#
	time = as.numeric(times),#
	dkilled = as.numeric(DriversKilled),#
	ndrivers = drivers,#
	front = front,#
	rear = rear,#
	kms = kms,#
	petrolprice = PetrolPrice,#
	vkilled = VanKilled,#
	law = law)#
#p <- ggplot(Seat)
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
#
data("Seatbelts")#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months#
	time = as.numeric(times),#
	dkilled = as.numeric(DriversKilled),#
	ndrivers = drivers,#
	front = front,#
	rear = rear,#
	kms = kms,#
	petrolprice = PetrolPrice,#
	vkilled = VanKilled,#
	law = law)#
#p <- ggplot(Seat)
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
#
data("Seatbelts")#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	dkilled = as.numeric(DriversKilled),#
	ndrivers = drivers,#
	front = front,#
	rear = rear,#
	kms = kms,#
	petrolprice = PetrolPrice,#
	vkilled = VanKilled,#
	law = law)#
#p <- ggplot(Seat)
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
#
data("Seatbelts")#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	dkilled = DriversKilled,#
	ndrivers = drivers,#
	front = front,#
	rear = rear,#
	kms = kms,#
	petrolprice = PetrolPrice,#
	vkilled = VanKilled,#
	law = law)#
#p <- ggplot(Seat)
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
#
data("Seatbelts")#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	dkilled = Seatbelts$DriversKilled,#
	ndrivers = drivers,#
	front = front,#
	rear = rear,#
	kms = kms,#
	petrolprice = PetrolPrice,#
	vkilled = VanKilled,#
	law = law)#
#p <- ggplot(Seat)
Seatbelts
ls(Seatbelts)
Seatbelts
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
#
data("Seatbelts")#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	dkilled = Seatbelts["DriversKilled"],#
	ndrivers = drivers,#
	front = front,#
	rear = rear,#
	kms = kms,#
	petrolprice = PetrolPrice,#
	vkilled = VanKilled,#
	law = law)#
#p <- ggplot(Seat)
front
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
#
data("Seatbelts")#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	dkilled = Seatbelts["DriversKilled"],#
	ndrivers = Seatbelts["drivers"],#
	front = Seatbelts["front"],#
	rear = Seatbelts["rear"],#
	kms = Seatbelts["kms"],#
	petrolprice = Seatbelts["PetrolPrice"],#
	vkilled = Seatbelts["VanKilled"],#
	law = Seatbelts["law"])#
#p <- ggplot(Seat)
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
#
data(Seatbelts)#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	dkilled = Seatbelts["DriversKilled"],#
	ndrivers = Seatbelts["drivers"],#
	front = Seatbelts["front"],#
	rear = Seatbelts["rear"],#
	kms = Seatbelts["kms"],#
	petrolprice = Seatbelts["PetrolPrice"],#
	vkilled = Seatbelts["VanKilled"],#
	law = Seatbelts["law"])#
#p <- ggplot(Seat)
seatbelts
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
#
data("Seatbelts")#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	dkilled = Seatbelts["DriversKilled"],#
	ndrivers = Seatbelts["drivers"],#
	front = Seatbelts["front"],#
	rear = Seatbelts["rear"],#
	kms = Seatbelts["kms"],#
	petrolprice = Seatbelts["PetrolPrice"],#
	vkilled = Seatbelts["VanKilled"],#
	law = Seatbelts["law"])#
#p <- ggplot(Seat)
seatbelts
Seatbelts
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
#
data("Seatbelts")#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	DriversKilled = DriversKilled,#
	ndrivers = Seatbelts["drivers"],#
	front = Seatbelts["front"],#
	rear = Seatbelts["rear"],#
	kms = Seatbelts["kms"],#
	petrolprice = Seatbelts["PetrolPrice"],#
	vkilled = Seatbelts["VanKilled"],#
	law = Seatbelts["law"])#
#p <- ggplot(Seat)
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
require(reshape2)#
#
data("Seatbelts")#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	DriversKilled = DriversKilled,#
	ndrivers = Seatbelts["drivers"],#
	front = Seatbelts["front"],#
	rear = Seatbelts["rear"],#
	kms = Seatbelts["kms"],#
	petrolprice = Seatbelts["PetrolPrice"],#
	vkilled = Seatbelts["VanKilled"],#
	law = Seatbelts["law"])#
#p <- ggplot(Seat)
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
require(reshape2)#
#
data("Seatbelts")#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	DriversKilled = as.numeric(DriversKilled),#
	ndrivers = Seatbelts["drivers"],#
	front = Seatbelts["front"],#
	rear = Seatbelts["rear"],#
	kms = Seatbelts["kms"],#
	petrolprice = Seatbelts["PetrolPrice"],#
	vkilled = Seatbelts["VanKilled"],#
	law = Seatbelts["law"])#
#p <- ggplot(Seat)
Seatbelts
DriversKilled
Seatbelts[1]
Seatbelts["DriversKilled"]
Seatbelts[c()]
Seatbelts$DriversKilled
Seatbelts(DriversKilled)
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
require(reshape2)#
#
data(Seatbelts)#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	DriversKilled = as.numeric(DriversKilled),#
	ndrivers = Seatbelts["drivers"],#
	front = Seatbelts["front"],#
	rear = Seatbelts["rear"],#
	kms = Seatbelts["kms"],#
	petrolprice = Seatbelts["PetrolPrice"],#
	vkilled = Seatbelts["VanKilled"],#
	law = Seatbelts["law"])#
#p <- ggplot(Seat)
Seatbelts
drivers
Seatbelts[,1]
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
require(reshape2)#
#
data(Seatbelts)#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	dkilled = as.numeric(Seatbelts[,1]),#
	ndrivers = drivers,#
	front = Seatbelts["front"],#
	rear = Seatbelts["rear"],#
	kms = Seatbelts["kms"],#
	petrolprice = Seatbelts["PetrolPrice"],#
	vkilled = Seatbelts["VanKilled"],#
	law = Seatbelts["law"])#
#p <- ggplot(Seat)
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
require(reshape2)#
#
data(Seatbelts)#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	dkilled = as.numeric(Seatbelts[,1]),#
	ndrivers = as.numeric(Seatbelts[,2]),#
	front = as.numeric(Seatbelts[,3]),#
	rear = as.numeric(Seatbelts[,4]),#
	kms = as.numeric(Seatbelts[,5]),#
	petrolprice = as.numeric(Seatbelts[,6]),#
	vkilled = as.numeric(Seatbelts[,7]),#
	law = as.numeric(Seatbelts[,8]))#
#p <- ggplot(Seat)
seatbelts
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
require(reshape2)#
#
data(Seatbelts)#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	dkilled = as.numeric(Seatbelts[,1]),#
	ndrivers = as.numeric(Seatbelts[,2]),#
	front = as.numeric(Seatbelts[,3]),#
	rear = as.numeric(Seatbelts[,4]),#
	kms = as.numeric(Seatbelts[,5]),#
	petrolprice = as.numeric(Seatbelts[,6]),#
	vkilled = as.numeric(Seatbelts[,7]),#
	law = as.numeric(Seatbelts[,8]))#
p <- ggplot(seatbelts, aes(#
	x = time,#
	y dkilled)) +#
	geom_line()#
#
print(p)
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
require(reshape2)#
#
data(Seatbelts)#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	dkilled = as.numeric(Seatbelts[,1]),#
	ndrivers = as.numeric(Seatbelts[,2]),#
	front = as.numeric(Seatbelts[,3]),#
	rear = as.numeric(Seatbelts[,4]),#
	kms = as.numeric(Seatbelts[,5]),#
	petrolprice = as.numeric(Seatbelts[,6]),#
	vkilled = as.numeric(Seatbelts[,7]),#
	law = as.numeric(Seatbelts[,8]))#
p <- ggplot(seatbelts, aes(#
	x = time,#
	y = dkilled)) +#
	geom_line()#
#
print(p)
p <- ggplot(seatbelts, aes(#
	x = year,#
	y = dkilled)) +#
	geom_line()#
#
print(p)
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
require(reshape2)#
#
data(Seatbelts)#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	dkilled = as.numeric(Seatbelts[,1]),#
	ndrivers = as.numeric(Seatbelts[,2]),#
	front = as.numeric(Seatbelts[,3]),#
	rear = as.numeric(Seatbelts[,4]),#
	kms = as.numeric(Seatbelts[,5]),#
	petrolprice = as.numeric(Seatbelts[,6]),#
	vkilled = as.numeric(Seatbelts[,7]),#
	law = as.numeric(Seatbelts[,8]))#
p <- ggplot(seatbelts, aes(#
	x = month,#
	y = dkilled)) +#
	geom_line()#
#
print(p)
p <- ggplot(seatbelts, aes(#
	x = time,#
	y = dkilled)) +#
	geom_line()#
#
print(p)
Seatbelts
seatbelts
library(shiny)
shiny::runGitHub('msan622', 'lectures', subdir='timeseries', subdir='animated')
shiny::runGitHub('msan622', 'lectures', 'TimeSeries', subdir='animated')
shiny::runGitHub('msan622', 'lectures', subdir='TimeSeries', 'animated')
shiny::runGitHub('msan622', 'lectures', subdir='TimeSeries', subdir2='animated')
?Seatbelts
rm(list=ls())#
#
library(ggplot2)#
library(shiny)#
require(reshape2)#
#
data(Seatbelts)#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	dkilled = as.numeric(Seatbelts[,1]),#
	ndrivers = as.numeric(Seatbelts[,2]),#
	front = as.numeric(Seatbelts[,3]),#
	rear = as.numeric(Seatbelts[,4]),#
	kms = as.numeric(Seatbelts[,5]),#
	petrolprice = as.numeric(Seatbelts[,6]),#
	vkilled = as.numeric(Seatbelts[,7]),#
	law = as.numeric(Seatbelts[,8]))#
p <- ggplot(seatbelts, aes(#
	x = time,#
	y = dkilled)) +#
	geom_line()#
#
print(p)#
#
## Stacked?#
## gapminder time series: x = petrolprice, y = kms, size = dkilled#
## gapminder time series: x = petrolprice, y = kms, size = front#
## gapminder time series: x = petrolprice, y = kms, size = rear#
## each of the above can also be rendered in a heat map#
	# diverging color scale in red perhaps#
#
## Stacked area #
#
## Rolling circle view of heat map#
#
## y = petrolprice, x = time, size = dkilled#
#
## gapminder time series: x = kms, y = dkilled,
require(ggplot2)#
#
source("data.r")#
source("pretty.r")#
#
# CREATE BASE PLOT #####################
p <- ggplot(molten, aes(x = time, y = value))#
#
# LINE CHART ###########################
#
# p <- p + geom_line(#
#     data = subset(molten, variable == "total")#
# )#
#
# AREA CHART ###########################
p <- p + geom_area(#
    data = subset(molten, variable != "total"),#
    aes(#
        group = variable,#
        fill = variable,#
        # not really necessary#
        color = variable,#
        # swap stacking order#
        order = -as.numeric(variable)#
    )#
)#
#
# make it pretty#
p <- p + scale_year()#
p <- p + scale_deaths()#
p <- p + theme_legend()#
#
# squarify grid (1 year to 1000 deaths)#
p <- p + coord_fixed(ratio = 1 / 1000)#
#
print(p)
require(reshape2) # melt#
#
# EXPLORE DATASET ######################
#
data(UKLungDeaths)#
?UKLungDeaths#
#
# is.ts(ldeaths)  # a time series#
# str(ldeaths)    # deaths from 1974 to 1980#
# print(ldeaths)  # prints in nice format#
# View(ldeaths)   # but really just numbers#
#
# EXTRACT DATASET ######################
#
# creates x-axis for time series#
times <- time(ldeaths)#
#
# note that 1/12 is approximately 0.0833#
# note that february is 1974.083#
print(times)#
#
# extract years for grouping later#
years <- floor(times)#
years <- factor(years, ordered = TRUE)#
#
# extract months by looking at time series cycle#
cycle(times)        # 1 through 12 for each year#
print(month.abb)    # month abbreviations#
#
# store month abbreviations as factor#
months <- factor(#
    month.abb[cycle(times)],#
    levels = month.abb,#
    ordered = TRUE#
)#
#
# MOLTEN DATASET #######################
#
deaths <- data.frame(#
    year   = years,#
    month  = months,#
    time   = as.numeric(times),#
    total  = as.numeric(ldeaths),#
    male   = as.numeric(mdeaths),#
    female = as.numeric(fdeaths)#
)#
#
molten <- melt(#
    deaths,#
    id = c("year", "month", "time")#
)#
#
# todo: change time into Date object
require(ggplot2)#
#
source("data.r")#
source("pretty.r")#
#
# CREATE BASE PLOT #####################
p <- ggplot(molten, aes(x = time, y = value))#
#
# LINE CHART ###########################
#
# p <- p + geom_line(#
#     data = subset(molten, variable == "total")#
# )#
#
# AREA CHART ###########################
p <- p + geom_area(#
    data = subset(molten, variable != "total"),#
    aes(#
        group = variable,#
        fill = variable,#
        # not really necessary#
        color = variable,#
        # swap stacking order#
        order = -as.numeric(variable)#
    )#
)#
#
# make it pretty#
p <- p + scale_year()#
p <- p + scale_deaths()#
p <- p + theme_legend()#
#
# squarify grid (1 year to 1000 deaths)#
p <- p + coord_fixed(ratio = 1 / 1000)#
#
print(p)
library(ggplot2)#
library(shiny)#
require(reshape2)#
#
data(Seatbelts)#
#
times <- time(Seatbelts)#
years <- floor(times)#
years <- factor(years, ordered=TRUE)#
#
months <- factor(month.abb[cycle(times)],#
	levels = month.abb,#
	ordered = TRUE)#
#
seatbelts <- data.frame(#
	year = years,#
	month = months,#
	time = as.numeric(times),#
	dkilled = as.numeric(Seatbelts[,1]),#
	ndrivers = as.numeric(Seatbelts[,2]),#
	front = as.numeric(Seatbelts[,3]),#
	rear = as.numeric(Seatbelts[,4]),#
	kms = as.numeric(Seatbelts[,5]),#
	petrolprice = as.numeric(Seatbelts[,6]),#
	vkilled = as.numeric(Seatbelts[,7]),#
	law = as.numeric(Seatbelts[,8]))#
#
molten <- melt(seatbelts, id = c("year", "month", "time"))#
#
## Stacked?#
## gapminder time series: x = petrolprice, y = kms, size = dkilled#
## gapminder time series: x = petrolprice, y = kms, size = front#
## gapminder time series: x = petrolprice, y = kms, size = rear#
## each of the above can also be rendered in a heat map#
	# diverging color scale in red perhaps#
#
## Stacked area #
#
## Rolling circle view of heat map#
#
## y = petrolprice, x = time, size = dkilled#
#
## gapminder time series: x = kms, y = dkilled,
library(stringr)#
#setwd("/Users/Summer/Desktop/")#
#
ooh <- read.csv("~/Dropbox/msandata/ooh.csv")#
oesnat <- read.csv("~/Dropbox/msandata/national_M2013_dl.csv")#
oesstate <- read.csv("~/Dropbox/msandata/state_M2013_dl.csv")#
oesakin <- read.csv("~/Dropbox/msandata/MSA_M2013_dl_1_AK_IN.csv")#
oesksny <- read.csv("~/Dropbox/msandata/MSA_M2013_dl_2_KS_NY.csv")#
oesohwy <- read.csv("~/Dropbox/msandata/MSA_M2013_dl_3_OH_WY.csv")#
oesmetro <- rbind(oesakin, oesksny, oesohwy)#
#
oohoesnat <- merge(ooh, oesnat, by.x="soc_code", by.y="OCC_CODE")#
#
#oesnat$A_PCT90 <- as.numeric(gsub(",", "", oesnat$A_PCT90, fixed=TRUE))#
rem_commas <- function(x) {#
	x <- as.numeric(gsub(",", "", x, fixed=TRUE))#
}#
#
# for(i in 7:ncol(oesnat)) {#
	# oesnat[,i] <- as.numeric(oesnat[,i])#
# }#
#
oesnat$A_PCT10 <- rem_commas(oesnat$A_PCT10)#
oesnat$A_PCT25 <- rem_commas(oesnat$A_PCT25)#
oesnat$A_MEAN <- rem_commas(oesnat$A_MEAN)#
oesnat$A_MEDIAN <- rem_commas(oesnat$A_MEDIAN)#
oesnat$A_PCT75 <- rem_commas(oesnat$A_PCT75)#
oesnat$A_PCT90 <- rem_commas(oesnat$A_PCT90)#
oesnat$TOT_EMP <- rem_commas(oesnat$TOT_EMP)#
#
oesstate$A_PCT10 <- rem_commas(oesstate$A_PCT10)#
oesstate$A_PCT25 <- rem_commas(oesstate$A_PCT25)#
oesstate$A_MEAN <- rem_commas(oesstate$A_MEAN)#
oesstate$A_MEDIAN <- rem_commas(oesstate$A_MEDIAN)#
oesstate$A_PCT75 <- rem_commas(oesstate$A_PCT75)#
oesstate$A_PCT90 <- rem_commas(oesstate$A_PCT90)#
oesstate$TOT_EMP <- rem_commas(oesstate$TOT_EMP)#
oesstate$JOBS_1000 <- rem_commas(oesstate$JOBS_1000)#
#
oesmetro$A_PCT10 <- rem_commas(oesmetro$A_PCT10)#
oesmetro$A_PCT25 <- rem_commas(oesmetro$A_PCT25)#
oesmetro$A_MEAN <- rem_commas(oesmetro$A_MEAN)#
oesmetro$A_MEDIAN <- rem_commas(oesmetro$A_MEDIAN)#
oesmetro$A_PCT75 <- rem_commas(oesmetro$A_PCT75)#
oesmetro$A_PCT90 <- rem_commas(oesmetro$A_PCT90)#
oesmetro$TOT_EMP <- rem_commas(oesmetro$TOT_EMP)#
oesstate$JOBS_1000 <- rem_commas(oesstate$JOBS_1000)#
#lapply(oesnat, class)#
#levels(oesnat$OCC_CODE)#
#
oesnat$indclass <- rep(NA, nrow(oesnat))#
oesnat$indclass <- substr(oesnat$OCC_CODE,1,2)#
oesnat$indclass[which(oesnat$indclass == "00")] = "All Occupations"#
oesnat$indclass[which(oesnat$indclass == "11")] = "Management"#
oesnat$indclass[which(oesnat$indclass == "13")] = "Business and Financial Operations"#
oesnat$indclass[which(oesnat$indclass == "15")] = "Computer and Mathematical"#
oesnat$indclass[which(oesnat$indclass == "17")] = "Architecture and Engineering"#
oesnat$indclass[which(oesnat$indclass == "19")] = "Life, Physical and Social Science"#
oesnat$indclass[which(oesnat$indclass == "21")] = "Community and Social Service"#
oesnat$indclass[which(oesnat$indclass == "23")] = "Legal"#
oesnat$indclass[which(oesnat$indclass == "25")] = "Education, Training, and Library"#
oesnat$indclass[which(oesnat$indclass == "27")] = "Arts, Design, Entertainment, Sports, and Media"#
oesnat$indclass[which(oesnat$indclass == "29")] = "Healthcare Practitioners and Technical"#
oesnat$indclass[which(oesnat$indclass == "31")] = "Healthcare Support"#
oesnat$indclass[which(oesnat$indclass == "33")] = "Protective Service"#
oesnat$indclass[which(oesnat$indclass == "35")] = "Food Preparation and Serving Related"#
oesnat$indclass[which(oesnat$indclass == "37")] = "Building and Grounds Cleaning and Maintenance"#
oesnat$indclass[which(oesnat$indclass == "39")] = "Personal Care and Service"#
oesnat$indclass[which(oesnat$indclass == "41")] = "Sales and Related"#
oesnat$indclass[which(oesnat$indclass == "43")] = "Office and Administrative Support"#
oesnat$indclass[which(oesnat$indclass == "45")] = "Farming, Fishing, and Forestry"#
oesnat$indclass[which(oesnat$indclass == "47")] = "Construction and Extraction"#
oesnat$indclass[which(oesnat$indclass == "49")] = "Installation, Maintenance, and Repair"#
oesnat$indclass[which(oesnat$indclass == "51")] = "Production"#
oesnat$indclass[which(oesnat$indclass == "53")] = "Transportation and Material Moving"#
#
oesnat$OCC_TITLE <- str_trim(oesnat$OCC_TITLE, side="both") # removes whitespace leading or trailing in strings
oesmetro$indclass <- rep(NA, nrow(oesmetro))#
oesmetro$indclass <- substr(oesmetro$OCC_CODE,1,2)#
oesmetro$indclass[which(oesmetro$indclass == "00")] = "All Occupations"#
oesmetro$indclass[which(oesmetro$indclass == "11")] = "Management"#
oesmetro$indclass[which(oesmetro$indclass == "13")] = "Business and Financial Operations"#
oesmetro$indclass[which(oesmetro$indclass == "15")] = "Computer and Mathematical"#
oesmetro$indclass[which(oesmetro$indclass == "17")] = "Architecture and Engineering"#
oesmetro$indclass[which(oesmetro$indclass == "19")] = "Life, Physical and Social Science"#
oesmetro$indclass[which(oesmetro$indclass == "21")] = "Community and Social Service"#
oesmetro$indclass[which(oesmetro$indclass == "23")] = "Legal"#
oesmetro$indclass[which(oesmetro$indclass == "25")] = "Education, Training, and Library"#
oesmetro$indclass[which(oesmetro$indclass == "27")] = "Arts, Design, Entertainment, Sports, and Media"#
oesmetro$indclass[which(oesmetro$indclass == "29")] = "Healthcare Practitioners and Technical"#
oesmetro$indclass[which(oesmetro$indclass == "31")] = "Healthcare Support"#
oesmetro$indclass[which(oesmetro$indclass == "33")] = "Protective Service"#
oesmetro$indclass[which(oesmetro$indclass == "35")] = "Food Preparation and Serving Related"#
oesmetro$indclass[which(oesmetro$indclass == "37")] = "Building and Grounds Cleaning and Maintenance"#
oesmetro$indclass[which(oesmetro$indclass == "39")] = "Personal Care and Service"#
oesmetro$indclass[which(oesmetro$indclass == "41")] = "Sales and Related"#
oesmetro$indclass[which(oesmetro$indclass == "43")] = "Office and Administrative Support"#
oesmetro$indclass[which(oesmetro$indclass == "45")] = "Farming, Fishing, and Forestry"#
oesmetro$indclass[which(oesmetro$indclass == "47")] = "Construction and Extraction"#
oesmetro$indclass[which(oesmetro$indclass == "49")] = "Installation, Maintenance, and Repair"#
oesmetro$indclass[which(oesmetro$indclass == "51")] = "Production"#
oesmetro$indclass[which(oesmetro$indclass == "53")] = "Transportation and Material Moving"
oesmetro$indclass
oesstate$indclass <- rep(NA, nrow(oesstate))#
oesstate$indclass <- substr(oesstate$OCC_CODE,1,2)#
oesstate$indclass[which(oesstate$indclass == "00")] = "All Occupations"#
oesstate$indclass[which(oesstate$indclass == "11")] = "Management"#
oesstate$indclass[which(oesstate$indclass == "13")] = "Business and Financial Operations"#
oesstate$indclass[which(oesstate$indclass == "15")] = "Computer and Mathematical"#
oesstate$indclass[which(oesstate$indclass == "17")] = "Architecture and Engineering"#
oesstate$indclass[which(oesstate$indclass == "19")] = "Life, Physical and Social Science"#
oesstate$indclass[which(oesstate$indclass == "21")] = "Community and Social Service"#
oesstate$indclass[which(oesstate$indclass == "23")] = "Legal"#
oesstate$indclass[which(oesstate$indclass == "25")] = "Education, Training, and Library"#
oesstate$indclass[which(oesstate$indclass == "27")] = "Arts, Design, Entertainment, Sports, and Media"#
oesstate$indclass[which(oesstate$indclass == "29")] = "Healthcare Practitioners and Technical"#
oesstate$indclass[which(oesstate$indclass == "31")] = "Healthcare Support"#
oesstate$indclass[which(oesstate$indclass == "33")] = "Protective Service"#
oesstate$indclass[which(oesstate$indclass == "35")] = "Food Preparation and Serving Related"#
oesstate$indclass[which(oesstate$indclass == "37")] = "Building and Grounds Cleaning and Maintenance"#
oesstate$indclass[which(oesstate$indclass == "39")] = "Personal Care and Service"#
oesstate$indclass[which(oesstate$indclass == "41")] = "Sales and Related"#
oesstate$indclass[which(oesstate$indclass == "43")] = "Office and Administrative Support"#
oesstate$indclass[which(oesstate$indclass == "45")] = "Farming, Fishing, and Forestry"#
oesstate$indclass[which(oesstate$indclass == "47")] = "Construction and Extraction"#
oesstate$indclass[which(oesstate$indclass == "49")] = "Installation, Maintenance, and Repair"#
oesstate$indclass[which(oesstate$indclass == "51")] = "Production"#
oesstate$indclass[which(oesstate$indclass == "53")] = "Transportation and Material Moving"
oesstate$indclass
ls(oesmetro)
head(oesmetro)
levels(AREA_NAME)
levels(oesmetro$AREA_NAME)
metrocities <- str_split(oesmetro$AREA_NAME, "-")
head(metrocities)
metrocities
metrolevels <- levels(oesmetro$AREA_NAME)
metrolevels
metrocities
head(metrocities)
metrolevels
levels(metrocities[1])
levels(metrocities[1,])
head(oesmetro)
oesmetro
head(oesmetro)
gor <- readShapeSpatial('~/Dropbox/msandata/ne_110m_admin_1_states_provinces_lines_shp.shp')
library(maptools)
gpclibPermit()
library(maptools)
gor <- readShapeSpatial('~/Dropbox/msandata/ne_110m_admin_1_states_provinces_lines_shp.shp')
gor <- readShapeSpatial('~/Dropbox/msandata/ne_110m_admin_1_states_provinces_lakes.shp')
gor <- readShapeSpatial('~/Dropbox/msandata/shapefiles/ne_110m_admin_1_states_provinces_lakes.shp')
plot(gor)
gorfill <- readShapeSpatial('~/Dropbox/msandata/shapefiles/ne_110m_admin_1_states_provinces_lines_shp.shp')
plot(gor)
plot(gorfill)
plot(goroutline)
goroutline <- readShapeSpatial('~/Dropbox/msandata/shapefiles/ne_110m_admin_1_states_provinces_lakes.shp')#
gorfill <- readShapeSpatial('~/Dropbox/msandata/shapefiles/ne_110m_admin_1_states_provinces_lines_shp.shp')
plot(goroutline)
plot(gorfill)
gorlakes <- readShapeSpatial('~/Dropbox/msandata/shapefiles/ne_110m_admin_1_states_provinces_lakes.shp')#
gorlines <- readShapeSpatial('~/Dropbox/msandata/shapefiles/ne_110m_admin_1_states_provinces_lines_shp.shp')
summary(gorlines)
gorplaces <- readShapeSpatial('~/Dropbox/msandata/shapefiles/ne_110m_populated_places.shp')
plot(gorplaces)
library(shiny)
runGitHub('msan622', 'j-gilmore', subdir = 'homework5')
require(ggplot2)#
require(grid)#
require(scales)#
library(RColorBrewer)#
#
source("data.r")#
source("handsome.r")#
#
## h = heatmap#
## a = area plot#
## m = multi-line#
#
plot_function <- function(plottype, colorscheme, heattype, areatype, smtype, yearrange) {#
#
	indices <- which(seatbelts$year>=yearrange[1] & seatbelts$year <=yearrange[2])#
	seatbeltssub <- seatbelts[indices,]#
	moltensub <- melt(seatbeltssub, id = c("year", "month", "time"))#
#
	indicesarea <- which(seatbeltsarea$year>=yearrange[1] & seatbeltsarea$year <=yearrange[2])#
	seatbeltssubarea <- seatbeltsarea[indices,]#
	moltensubarea <- melt(seatbeltssubarea, id = c("year", "month", "time"))#
#
	if(plottype=="Heatmaps") {#
		h <- ggplot(#
			subset(moltensub, variable == "dkilled"),#
			aes(x = month, y = year))#
#
		h <- h + geom_tile(#
			aes(fill = value),#
			colour = "white")#
		h <- h + scale_clr(colorscheme)#
		h <- h + scale_y_discrete(expand = c(0, 0))#
		h <- h + theme(axis.text.x=element_text(face="bold"))#
		h <- h + theme(axis.text.y=element_text(face="bold"))#
		h <- h + theme(plot.title = element_text(face="bold"))#
		h <- h + theme_heatmap()#
		if(heattype=="heatfixedcoord") {#
			h <- h + coord_fixed(ratio = 1)#
			h <- h + ggtitle("Traditional Heatmap")#
		}#
		if(heattype=="heatpolarcoord") {#
			h <- h + coord_polar()#
			h <- h + theme(axis.text.y=element_text(angle=0))#
			h <- h + ggtitle("Polar Coordinates Heatmap")#
		}#
		return(print(h))#
	}#
	if(plottype=="Area Chart") {#
		a <- ggplot(moltensubarea, aes(x = time, y = value))#
		a <- a + geom_area(#
    		data = subset(moltensubarea, variable != "total"),#
    		aes(#
        	group = variable,#
        	fill = variable,#
        	# not really necessary#
        	color = variable,#
        	# swap stacking order#
			order = -as.numeric(variable)#
    		)#
		)#
		# make it handsome#
		a <- a + scale_year(yearrange)#
		a <- a + scale_deathsarea()		#
		a <- a + theme_legend()#
		a <- a + theme(axis.text.x=element_text(face="bold"))#
		a <- a + theme(axis.text.y=element_text(face="bold"))#
		a <- a + theme(legend.text=element_text(face="bold"))#
		a <- a + theme(plot.title = element_text(face="bold"))#
		a <- a + theme(axis.title.x=element_blank())#
		a <- a + scale_colour_brewer(palette=colorscheme)#
		a <- a + scale_fill_brewer(palette=colorscheme)#
		if(areatype=="areafixed") {#
		# squarify grid (1 year to 1000 deaths)#
			a <- a + coord_fixed(ratio = 1 / 500)#
			a <- a + ggtitle("Area Chart")#
		}#
		if(areatype=="areapolar") {#
			# CREATE STAR-LIKE PLOT ################
			a <- a + coord_polar()#
			a <- a + ggtitle("Polar Coordinates 'Star' Chart")#
		}#
		return(a)#
	}#
	if(plottype=="Multi-Line") {#
		m <- ggplot(moltensubarea, aes(x = month, y = value))#
		m <- m + geom_line(#
    		data = subset(moltensubarea, variable != "total"),#
    		aes(#
        	group = variable,#
        	# fill = variable,#
        	# not really necessary#
        	color = variable,#
        	# swap stacking order#
			order = -as.numeric(variable)#
    		)#
		)#
		# make it handsome#
		m <- m + scale_months()#
		m <- m + scale_deathsmulti()#
		m <- m + theme_legend()#
		m <- m + theme(axis.text.x=element_text(face="bold"))#
		m <- m + theme(axis.text.y=element_text(face="bold"))#
		m <- m + theme(legend.text=element_text(face="bold"))#
		m <- m + theme(axis.title.x=element_blank())#
		m <- m + scale_colour_brewer(palette=colorscheme)#
		m <- m + scale_fill_brewer(palette=colorscheme)#
		m <- m + theme(plot.title = element_text(face="bold"))#
#
 		if(smtype=="smfacet") {#
			# CREATE FACET PLOT ####################
		m <- m + facet_wrap(~ year, ncol = 2)#
		m <- m + theme(legend.position = "right")#
		m <- m + theme(legend.direction="vertical")#
		m <- m + ggtitle("Small Multiples Line Plot")#
		}#
 		if(smtype=="smpolar") {#
			# CREATE FACET PLOT ####################
		m <- m + coord_polar()#
		m <- m + ggtitle("Polar Coordinates 'Star' Plot")#
		}#
		return(print(m))#
	}#
}#
#
shinyServer(function(input, output) {#
	cat("Press \"ESC\" to exit...\n")#
#
	output$ui <- renderUI({#
		if (is.null(input$input_type))#
			return()#
		switch(input$input_type,#
			"Heatmaps" = fluidRow(#
				column(12,#
					br(),#
					radioButtons("heattype", h5("Type of Heatmap"),#
						choices = c("Fixed Coordinates" = "heatfixedcoord",#
									"Polar Coordinates" = "heatpolarcoord"),#
						selected = "heatfixedcoord"#
					),#
					includeHTML("aboutheatmaps.html")#
				)),#
			"Area Chart" = fluidRow(#
				column(12,#
					br(),#
					radioButtons("areatype", h5("Type of Area Chart"),#
						choices = c("Fixed Coordinates" = "areafixed",#
									"Polar Coordinates" = "areapolar"),#
						selected = "areafixed"#
					),#
					includeHTML("aboutareacharts.html")#
				)#
			),#
			"Multi-Line" = fluidRow(#
				column(12,#
					br(),#
					radioButtons("smtype", h5("Type of Multiples Plot"),#
						choices = c("Small Multiples" = "smfacet",#
									"Polar Coordinates" = "smpolar"),#
						selected = "smfacet"#
					),#
					includeHTML("aboutmultiline.html")#
				)#
				)#
		)#
	})#
	getplot <- reactive({#
		results <- input$input_type#
		return(results)#
	})#
	getcolor <- reactive({#
		if(input$input_type=="Heatmaps") {#
			results <- "RdBu"#
		}#
		else {#
			results <- "Set1"#
		}#
		return(results)#
	})#
#
	getheat <- reactive ({#
		results <- input$heattype#
		return(results)#
	})#
	getarea <- reactive ({#
		results <- input$areatype#
		return(results)#
	})#
	getsm <- reactive ({#
		results <- input$smtype#
		return(results)#
	})#
#
	output$plotResults <- renderPlot ({#
		plotResults <- plot_function(getplot(), getcolor(), getheat(), #
		getarea(), getsm(), input$yearrange)#
		print(plotResults)#
	}, width = 700, height = 600)#
})
runApp()
library(shiny)
runGitHub('msan622', 'j-gilmore', subdir = 'homework5')
stateneighbors <- read.csv("~/Dropbox/msanProject/neighbors.csv")
head(stateneighbors)
statensub<- stateneighbor[which(stateneighbor$state==state),]
stateneighbors[which(stateneighbor$state=="CA"),]
stateneighbors[which(stateneighbors$state=="CA"),]
staten <- str_split(stateneighbors$neighbors, ", ")
library(stringr)
staten <- str_split(stateneighbors$neighbors, ", ")
staten
staten[[1]]
staten[[2]]
statelatloncenter <- read.csv("~/Dropbox/msanProject/state_latlon.csv")
statecenter<- statelatlongcenter[which(statelatloncenter$state==CA),]
statecenter<- statelatloncenter[which(statelatloncenter$state==CA),]
statecenter<- statelatloncenter[which(statelatloncenter$state=="CA"),]
statecenter
statecenter<- statecenter[3,2]
statecenter
statecenter<- statelatloncenter[which(statelatloncenter$state=="CA"),]
statecenter<- c(statecenter$longitude, statecenter$latitude)
statecenter
library(ggplot2)#
library(ggmap)
ca.map <- get_map(statecenter, zoom = 6, color = "bw")
library(stringr)#
library(maptools) #gpclib or rgeos? one or the other is needed#
#gpclibPermit()#
library(data.table) # to remove dups from geolite#
#
ooh <- read.csv("~/Dropbox/msanPractice/data/ooh.csv")#
oesnat <- read.csv("~/Dropbox/msanPractice/data/national_M2013_dl.csv")#
oesstate <- read.csv("~/Dropbox/msanPractice/data/state_M2013_dl.csv")#
oesakin <- read.csv("~/Dropbox/msanPractice/data/MSA_M2013_dl_1_AK_IN.csv")#
oesksny <- read.csv("~/Dropbox/msanPractice/data/MSA_M2013_dl_2_KS_NY.csv")#
oesohwy <- read.csv("~/Dropbox/msanPractice/data/MSA_M2013_dl_3_OH_WY.csv")#
oesmetro <- rbind(oesakin, oesksny, oesohwy)#
#
natpopfile <- read.csv("~/Dropbox/msanPractice/data/NST-EST2013-popchg2010_2013.csv")#
natpopfile <- data.frame (#
	state = as.character(natpopfile[,5]),#
	population = as.numeric(natpopfile[,7]))#
oesstatepop <- merge(oesstate, natpopfile, by.x="STATE", by.y="state")#
#
## Load plotting maps#
geolite <- read.csv("~/Dropbox/msanPractice/GeoLiteCity-Location.csv", skip=1)#
geolite <- subset(geolite, country=="US")#
#
# write.csv(geolite, file = "~/Dropbox/msanProject/geolite.csv")#
# gorlakes <- readShapeSpatial('~/Dropbox/msanProject/shapefiles/ne_50m_admin_1_states_provinces_lakes.shp') #or 110m#
# gorlines <- readShapeSpatial('~/Dropbox/msanProject/shapefiles/ne_50m_admin_1_states_provinces_lines_shp.shp')#
# gorplaces <- readShapeSpatial('~/Dropbox/msanProject/shapefiles/ne_50m_populated_places.shp')#
#
geomerge <- merge(oesmetro, geolite, by.x="AREA_NAME", by.y="city")#
geolite <- data.frame (#
	areaCode = as.numeric(geolite[,9]),#
	city = as.character(geolite[,4]),#
	country = as.character(geolite[,2]),#
	latitude = as.numeric(geolite[,6]),#
	locId = as.numeric(geolite[,1]),#
	longitude = as.numeric(geolite[,7]),#
	metroCode = as.numeric(geolite[,8]),#
	postalCode = as.numeric(geolite[,5]),#
	region = as.character(geolite[,3]))#
#
geolite <- geolite[!(geolite[5]<=1000),]#
#
#add population to geolite#
# US Population by zipcode: http://blog.splitwise.com/2013/09/18/the-2010-us-census-population-by-zip-code-totally-free/#
# filename: 2010+Census+Population+By+Zipcode+(ZCTA).csv#
zippop <- read.csv("~/Dropbox/msanPractice/2010+Census+Population+By+Zipcode+(ZCTA).csv")#
zippop <- data.frame (#
	zipCode = as.numeric(zippop[,1]),#
	population = as.numeric(zippop[,2]))#
geopop <- merge(geolite, zippop, by.x="postalCode", by.y="zipCode")#
geopopsort <- geopop[with(geopop, order(region, city, population)),]#
geopopsort$citystate <- str_c(geopopsort$city, ", ", geopopsort$region) #concantonate to mitigate for Springfields#
#
#remove duplicates and keep largest population row#
geopopremovedups <- as.data.table(geopopsort)#
geopopremovedups <- geopopremovedups[,.SD[which.max(population)], by=citystate]#
geopop <- as.data.frame(geopopremovedups)#
#
rem_commas <- function(x) {#
	x <- as.numeric(gsub(",", "", x, fixed=TRUE))#
}#
#
oesnat$A_PCT10 <- rem_commas(oesnat$A_PCT10)#
oesnat$A_PCT25 <- rem_commas(oesnat$A_PCT25)#
oesnat$A_MEAN <- rem_commas(oesnat$A_MEAN)#
oesnat$A_MEDIAN <- rem_commas(oesnat$A_MEDIAN)#
oesnat$A_PCT75 <- rem_commas(oesnat$A_PCT75)#
oesnat$A_PCT90 <- rem_commas(oesnat$A_PCT90)#
oesnat$TOT_EMP <- rem_commas(oesnat$TOT_EMP)#
#
oesstate$A_PCT10 <- rem_commas(oesstate$A_PCT10)#
oesstate$A_PCT25 <- rem_commas(oesstate$A_PCT25)#
oesstate$A_MEAN <- rem_commas(oesstate$A_MEAN)#
oesstate$A_MEDIAN <- rem_commas(oesstate$A_MEDIAN)#
oesstate$A_PCT75 <- rem_commas(oesstate$A_PCT75)#
oesstate$A_PCT90 <- rem_commas(oesstate$A_PCT90)#
oesstate$TOT_EMP <- rem_commas(oesstate$TOT_EMP)#
oesstate$JOBS_1000 <- rem_commas(oesstate$JOBS_1000)#
#
oesmetro$A_PCT10 <- rem_commas(oesmetro$A_PCT10)#
oesmetro$A_PCT25 <- rem_commas(oesmetro$A_PCT25)#
oesmetro$A_MEAN <- rem_commas(oesmetro$A_MEAN)#
oesmetro$A_MEDIAN <- rem_commas(oesmetro$A_MEDIAN)#
oesmetro$A_PCT75 <- rem_commas(oesmetro$A_PCT75)#
oesmetro$A_PCT90 <- rem_commas(oesmetro$A_PCT90)#
oesmetro$TOT_EMP <- rem_commas(oesmetro$TOT_EMP)#
oesstate$JOBS_1000 <- rem_commas(oesstate$JOBS_1000)#
#
oesnat$indclass <- rep(NA, nrow(oesnat))#
oesnat$indclass <- substr(oesnat$OCC_CODE,1,2)#
oesnat$indclass[which(oesnat$indclass == "00")] = "All Occupations"#
oesnat$indclass[which(oesnat$indclass == "11")] = "Management"#
oesnat$indclass[which(oesnat$indclass == "13")] = "Business and Financial Operations"#
oesnat$indclass[which(oesnat$indclass == "15")] = "Computer and Mathematical"#
oesnat$indclass[which(oesnat$indclass == "17")] = "Architecture and Engineering"#
oesnat$indclass[which(oesnat$indclass == "19")] = "Life, Physical and Social Science"#
oesnat$indclass[which(oesnat$indclass == "21")] = "Community and Social Service"#
oesnat$indclass[which(oesnat$indclass == "23")] = "Legal"#
oesnat$indclass[which(oesnat$indclass == "25")] = "Education, Training, and Library"#
oesnat$indclass[which(oesnat$indclass == "27")] = "Arts, Design, Entertainment, Sports, and Media"#
oesnat$indclass[which(oesnat$indclass == "29")] = "Healthcare Practitioners and Technical"#
oesnat$indclass[which(oesnat$indclass == "31")] = "Healthcare Support"#
oesnat$indclass[which(oesnat$indclass == "33")] = "Protective Service"#
oesnat$indclass[which(oesnat$indclass == "35")] = "Food Preparation and Serving Related"#
oesnat$indclass[which(oesnat$indclass == "37")] = "Building and Grounds Cleaning and Maintenance"#
oesnat$indclass[which(oesnat$indclass == "39")] = "Personal Care and Service"#
oesnat$indclass[which(oesnat$indclass == "41")] = "Sales and Related"#
oesnat$indclass[which(oesnat$indclass == "43")] = "Office and Administrative Support"#
oesnat$indclass[which(oesnat$indclass == "45")] = "Farming, Fishing, and Forestry"#
oesnat$indclass[which(oesnat$indclass == "47")] = "Construction and Extraction"#
oesnat$indclass[which(oesnat$indclass == "49")] = "Installation, Maintenance, and Repair"#
oesnat$indclass[which(oesnat$indclass == "51")] = "Production"#
oesnat$indclass[which(oesnat$indclass == "53")] = "Transportation and Material Moving"#
#
oesstate$indclass <- rep(NA, nrow(oesstate))#
oesstate$indclass <- substr(oesstate$OCC_CODE,1,2)#
oesstate$indclass[which(oesstate$indclass == "00")] = "All Occupations"#
oesstate$indclass[which(oesstate$indclass == "11")] = "Management"#
oesstate$indclass[which(oesstate$indclass == "13")] = "Business and Financial Operations"#
oesstate$indclass[which(oesstate$indclass == "15")] = "Computer and Mathematical"#
oesstate$indclass[which(oesstate$indclass == "17")] = "Architecture and Engineering"#
oesstate$indclass[which(oesstate$indclass == "19")] = "Life, Physical and Social Science"#
oesstate$indclass[which(oesstate$indclass == "21")] = "Community and Social Service"#
oesstate$indclass[which(oesstate$indclass == "23")] = "Legal"#
oesstate$indclass[which(oesstate$indclass == "25")] = "Education, Training, and Library"#
oesstate$indclass[which(oesstate$indclass == "27")] = "Arts, Design, Entertainment, Sports, and Media"#
oesstate$indclass[which(oesstate$indclass == "29")] = "Healthcare Practitioners and Technical"#
oesstate$indclass[which(oesstate$indclass == "31")] = "Healthcare Support"#
oesstate$indclass[which(oesstate$indclass == "33")] = "Protective Service"#
oesstate$indclass[which(oesstate$indclass == "35")] = "Food Preparation and Serving Related"#
oesstate$indclass[which(oesstate$indclass == "37")] = "Building and Grounds Cleaning and Maintenance"#
oesstate$indclass[which(oesstate$indclass == "39")] = "Personal Care and Service"#
oesstate$indclass[which(oesstate$indclass == "41")] = "Sales and Related"#
oesstate$indclass[which(oesstate$indclass == "43")] = "Office and Administrative Support"#
oesstate$indclass[which(oesstate$indclass == "45")] = "Farming, Fishing, and Forestry"#
oesstate$indclass[which(oesstate$indclass == "47")] = "Construction and Extraction"#
oesstate$indclass[which(oesstate$indclass == "49")] = "Installation, Maintenance, and Repair"#
oesstate$indclass[which(oesstate$indclass == "51")] = "Production"#
oesstate$indclass[which(oesstate$indclass == "53")] = "Transportation and Material Moving"#
#
oesmetro$indclass <- rep(NA, nrow(oesmetro))#
oesmetro$indclass <- substr(oesmetro$OCC_CODE,1,2)#
oesmetro$indclass[which(oesmetro$indclass == "00")] = "All Occupations"#
oesmetro$indclass[which(oesmetro$indclass == "11")] = "Management"#
oesmetro$indclass[which(oesmetro$indclass == "13")] = "Business and Financial Operations"#
oesmetro$indclass[which(oesmetro$indclass == "15")] = "Computer and Mathematical"#
oesmetro$indclass[which(oesmetro$indclass == "17")] = "Architecture and Engineering"#
oesmetro$indclass[which(oesmetro$indclass == "19")] = "Life, Physical and Social Science"#
oesmetro$indclass[which(oesmetro$indclass == "21")] = "Community and Social Service"#
oesmetro$indclass[which(oesmetro$indclass == "23")] = "Legal"#
oesmetro$indclass[which(oesmetro$indclass == "25")] = "Education, Training, and Library"#
oesmetro$indclass[which(oesmetro$indclass == "27")] = "Arts, Design, Entertainment, Sports, and Media"#
oesmetro$indclass[which(oesmetro$indclass == "29")] = "Healthcare Practitioners and Technical"#
oesmetro$indclass[which(oesmetro$indclass == "31")] = "Healthcare Support"#
oesmetro$indclass[which(oesmetro$indclass == "33")] = "Protective Service"#
oesmetro$indclass[which(oesmetro$indclass == "35")] = "Food Preparation and Serving Related"#
oesmetro$indclass[which(oesmetro$indclass == "37")] = "Building and Grounds Cleaning and Maintenance"#
oesmetro$indclass[which(oesmetro$indclass == "39")] = "Personal Care and Service"#
oesmetro$indclass[which(oesmetro$indclass == "41")] = "Sales and Related"#
oesmetro$indclass[which(oesmetro$indclass == "43")] = "Office and Administrative Support"#
oesmetro$indclass[which(oesmetro$indclass == "45")] = "Farming, Fishing, and Forestry"#
oesmetro$indclass[which(oesmetro$indclass == "47")] = "Construction and Extraction"#
oesmetro$indclass[which(oesmetro$indclass == "49")] = "Installation, Maintenance, and Repair"#
oesmetro$indclass[which(oesmetro$indclass == "51")] = "Production"#
oesmetro$indclass[which(oesmetro$indclass == "53")] = "Transportation and Material Moving"
library(stringr)#
library(maptools) #gpclib or rgeos? one or the other is needed#
#gpclibPermit()#
library(data.table) # to remove dups from geolite#
#
ooh <- read.csv("~/Dropbox/msanPractice/ooh.csv")#
oesnat <- read.csv("~/Dropbox/msanPractice/national_M2013_dl.csv")#
oesstate <- read.csv("~/Dropbox/msanPractice/state_M2013_dl.csv")#
oesakin <- read.csv("~/Dropbox/msanPractice/MSA_M2013_dl_1_AK_IN.csv")#
oesksny <- read.csv("~/Dropbox/msanPractice/MSA_M2013_dl_2_KS_NY.csv")#
oesohwy <- read.csv("~/Dropbox/msanPractice/MSA_M2013_dl_3_OH_WY.csv")#
oesmetro <- rbind(oesakin, oesksny, oesohwy)#
#
natpopfile <- read.csv("~/Dropbox/msanPractice/NST-EST2013-popchg2010_2013.csv")#
natpopfile <- data.frame (#
	state = as.character(natpopfile[,5]),#
	population = as.numeric(natpopfile[,7]))#
oesstatepop <- merge(oesstate, natpopfile, by.x="STATE", by.y="state")#
#
## Load plotting maps#
geolite <- read.csv("~/Dropbox/msanPractice/GeoLiteCity-Location.csv", skip=1)#
geolite <- subset(geolite, country=="US")#
#
# write.csv(geolite, file = "~/Dropbox/msanProject/geolite.csv")#
# gorlakes <- readShapeSpatial('~/Dropbox/msanProject/shapefiles/ne_50m_admin_1_states_provinces_lakes.shp') #or 110m#
# gorlines <- readShapeSpatial('~/Dropbox/msanProject/shapefiles/ne_50m_admin_1_states_provinces_lines_shp.shp')#
# gorplaces <- readShapeSpatial('~/Dropbox/msanProject/shapefiles/ne_50m_populated_places.shp')#
#
geomerge <- merge(oesmetro, geolite, by.x="AREA_NAME", by.y="city")#
geolite <- data.frame (#
	areaCode = as.numeric(geolite[,9]),#
	city = as.character(geolite[,4]),#
	country = as.character(geolite[,2]),#
	latitude = as.numeric(geolite[,6]),#
	locId = as.numeric(geolite[,1]),#
	longitude = as.numeric(geolite[,7]),#
	metroCode = as.numeric(geolite[,8]),#
	postalCode = as.numeric(geolite[,5]),#
	region = as.character(geolite[,3]))#
#
geolite <- geolite[!(geolite[5]<=1000),]#
#
#add population to geolite#
# US Population by zipcode: http://blog.splitwise.com/2013/09/18/the-2010-us-census-population-by-zip-code-totally-free/#
# filename: 2010+Census+Population+By+Zipcode+(ZCTA).csv#
zippop <- read.csv("~/Dropbox/msanPractice/2010+Census+Population+By+Zipcode+(ZCTA).csv")#
zippop <- data.frame (#
	zipCode = as.numeric(zippop[,1]),#
	population = as.numeric(zippop[,2]))#
geopop <- merge(geolite, zippop, by.x="postalCode", by.y="zipCode")#
geopopsort <- geopop[with(geopop, order(region, city, population)),]#
geopopsort$citystate <- str_c(geopopsort$city, ", ", geopopsort$region) #concantonate to mitigate for Springfields#
#
#remove duplicates and keep largest population row#
geopopremovedups <- as.data.table(geopopsort)#
geopopremovedups <- geopopremovedups[,.SD[which.max(population)], by=citystate]#
geopop <- as.data.frame(geopopremovedups)#
#
rem_commas <- function(x) {#
	x <- as.numeric(gsub(",", "", x, fixed=TRUE))#
}#
#
oesnat$A_PCT10 <- rem_commas(oesnat$A_PCT10)#
oesnat$A_PCT25 <- rem_commas(oesnat$A_PCT25)#
oesnat$A_MEAN <- rem_commas(oesnat$A_MEAN)#
oesnat$A_MEDIAN <- rem_commas(oesnat$A_MEDIAN)#
oesnat$A_PCT75 <- rem_commas(oesnat$A_PCT75)#
oesnat$A_PCT90 <- rem_commas(oesnat$A_PCT90)#
oesnat$TOT_EMP <- rem_commas(oesnat$TOT_EMP)#
#
oesstate$A_PCT10 <- rem_commas(oesstate$A_PCT10)#
oesstate$A_PCT25 <- rem_commas(oesstate$A_PCT25)#
oesstate$A_MEAN <- rem_commas(oesstate$A_MEAN)#
oesstate$A_MEDIAN <- rem_commas(oesstate$A_MEDIAN)#
oesstate$A_PCT75 <- rem_commas(oesstate$A_PCT75)#
oesstate$A_PCT90 <- rem_commas(oesstate$A_PCT90)#
oesstate$TOT_EMP <- rem_commas(oesstate$TOT_EMP)#
oesstate$JOBS_1000 <- rem_commas(oesstate$JOBS_1000)#
#
oesmetro$A_PCT10 <- rem_commas(oesmetro$A_PCT10)#
oesmetro$A_PCT25 <- rem_commas(oesmetro$A_PCT25)#
oesmetro$A_MEAN <- rem_commas(oesmetro$A_MEAN)#
oesmetro$A_MEDIAN <- rem_commas(oesmetro$A_MEDIAN)#
oesmetro$A_PCT75 <- rem_commas(oesmetro$A_PCT75)#
oesmetro$A_PCT90 <- rem_commas(oesmetro$A_PCT90)#
oesmetro$TOT_EMP <- rem_commas(oesmetro$TOT_EMP)#
oesstate$JOBS_1000 <- rem_commas(oesstate$JOBS_1000)#
#
oesnat$indclass <- rep(NA, nrow(oesnat))#
oesnat$indclass <- substr(oesnat$OCC_CODE,1,2)#
oesnat$indclass[which(oesnat$indclass == "00")] = "All Occupations"#
oesnat$indclass[which(oesnat$indclass == "11")] = "Management"#
oesnat$indclass[which(oesnat$indclass == "13")] = "Business and Financial Operations"#
oesnat$indclass[which(oesnat$indclass == "15")] = "Computer and Mathematical"#
oesnat$indclass[which(oesnat$indclass == "17")] = "Architecture and Engineering"#
oesnat$indclass[which(oesnat$indclass == "19")] = "Life, Physical and Social Science"#
oesnat$indclass[which(oesnat$indclass == "21")] = "Community and Social Service"#
oesnat$indclass[which(oesnat$indclass == "23")] = "Legal"#
oesnat$indclass[which(oesnat$indclass == "25")] = "Education, Training, and Library"#
oesnat$indclass[which(oesnat$indclass == "27")] = "Arts, Design, Entertainment, Sports, and Media"#
oesnat$indclass[which(oesnat$indclass == "29")] = "Healthcare Practitioners and Technical"#
oesnat$indclass[which(oesnat$indclass == "31")] = "Healthcare Support"#
oesnat$indclass[which(oesnat$indclass == "33")] = "Protective Service"#
oesnat$indclass[which(oesnat$indclass == "35")] = "Food Preparation and Serving Related"#
oesnat$indclass[which(oesnat$indclass == "37")] = "Building and Grounds Cleaning and Maintenance"#
oesnat$indclass[which(oesnat$indclass == "39")] = "Personal Care and Service"#
oesnat$indclass[which(oesnat$indclass == "41")] = "Sales and Related"#
oesnat$indclass[which(oesnat$indclass == "43")] = "Office and Administrative Support"#
oesnat$indclass[which(oesnat$indclass == "45")] = "Farming, Fishing, and Forestry"#
oesnat$indclass[which(oesnat$indclass == "47")] = "Construction and Extraction"#
oesnat$indclass[which(oesnat$indclass == "49")] = "Installation, Maintenance, and Repair"#
oesnat$indclass[which(oesnat$indclass == "51")] = "Production"#
oesnat$indclass[which(oesnat$indclass == "53")] = "Transportation and Material Moving"#
#
oesstate$indclass <- rep(NA, nrow(oesstate))#
oesstate$indclass <- substr(oesstate$OCC_CODE,1,2)#
oesstate$indclass[which(oesstate$indclass == "00")] = "All Occupations"#
oesstate$indclass[which(oesstate$indclass == "11")] = "Management"#
oesstate$indclass[which(oesstate$indclass == "13")] = "Business and Financial Operations"#
oesstate$indclass[which(oesstate$indclass == "15")] = "Computer and Mathematical"#
oesstate$indclass[which(oesstate$indclass == "17")] = "Architecture and Engineering"#
oesstate$indclass[which(oesstate$indclass == "19")] = "Life, Physical and Social Science"#
oesstate$indclass[which(oesstate$indclass == "21")] = "Community and Social Service"#
oesstate$indclass[which(oesstate$indclass == "23")] = "Legal"#
oesstate$indclass[which(oesstate$indclass == "25")] = "Education, Training, and Library"#
oesstate$indclass[which(oesstate$indclass == "27")] = "Arts, Design, Entertainment, Sports, and Media"#
oesstate$indclass[which(oesstate$indclass == "29")] = "Healthcare Practitioners and Technical"#
oesstate$indclass[which(oesstate$indclass == "31")] = "Healthcare Support"#
oesstate$indclass[which(oesstate$indclass == "33")] = "Protective Service"#
oesstate$indclass[which(oesstate$indclass == "35")] = "Food Preparation and Serving Related"#
oesstate$indclass[which(oesstate$indclass == "37")] = "Building and Grounds Cleaning and Maintenance"#
oesstate$indclass[which(oesstate$indclass == "39")] = "Personal Care and Service"#
oesstate$indclass[which(oesstate$indclass == "41")] = "Sales and Related"#
oesstate$indclass[which(oesstate$indclass == "43")] = "Office and Administrative Support"#
oesstate$indclass[which(oesstate$indclass == "45")] = "Farming, Fishing, and Forestry"#
oesstate$indclass[which(oesstate$indclass == "47")] = "Construction and Extraction"#
oesstate$indclass[which(oesstate$indclass == "49")] = "Installation, Maintenance, and Repair"#
oesstate$indclass[which(oesstate$indclass == "51")] = "Production"#
oesstate$indclass[which(oesstate$indclass == "53")] = "Transportation and Material Moving"#
#
oesmetro$indclass <- rep(NA, nrow(oesmetro))#
oesmetro$indclass <- substr(oesmetro$OCC_CODE,1,2)#
oesmetro$indclass[which(oesmetro$indclass == "00")] = "All Occupations"#
oesmetro$indclass[which(oesmetro$indclass == "11")] = "Management"#
oesmetro$indclass[which(oesmetro$indclass == "13")] = "Business and Financial Operations"#
oesmetro$indclass[which(oesmetro$indclass == "15")] = "Computer and Mathematical"#
oesmetro$indclass[which(oesmetro$indclass == "17")] = "Architecture and Engineering"#
oesmetro$indclass[which(oesmetro$indclass == "19")] = "Life, Physical and Social Science"#
oesmetro$indclass[which(oesmetro$indclass == "21")] = "Community and Social Service"#
oesmetro$indclass[which(oesmetro$indclass == "23")] = "Legal"#
oesmetro$indclass[which(oesmetro$indclass == "25")] = "Education, Training, and Library"#
oesmetro$indclass[which(oesmetro$indclass == "27")] = "Arts, Design, Entertainment, Sports, and Media"#
oesmetro$indclass[which(oesmetro$indclass == "29")] = "Healthcare Practitioners and Technical"#
oesmetro$indclass[which(oesmetro$indclass == "31")] = "Healthcare Support"#
oesmetro$indclass[which(oesmetro$indclass == "33")] = "Protective Service"#
oesmetro$indclass[which(oesmetro$indclass == "35")] = "Food Preparation and Serving Related"#
oesmetro$indclass[which(oesmetro$indclass == "37")] = "Building and Grounds Cleaning and Maintenance"#
oesmetro$indclass[which(oesmetro$indclass == "39")] = "Personal Care and Service"#
oesmetro$indclass[which(oesmetro$indclass == "41")] = "Sales and Related"#
oesmetro$indclass[which(oesmetro$indclass == "43")] = "Office and Administrative Support"#
oesmetro$indclass[which(oesmetro$indclass == "45")] = "Farming, Fishing, and Forestry"#
oesmetro$indclass[which(oesmetro$indclass == "47")] = "Construction and Extraction"#
oesmetro$indclass[which(oesmetro$indclass == "49")] = "Installation, Maintenance, and Repair"#
oesmetro$indclass[which(oesmetro$indclass == "51")] = "Production"#
oesmetro$indclass[which(oesmetro$indclass == "53")] = "Transportation and Material Moving"#
#
# Get list of cities needed for geo-coding#
metroarealevels <- levels(oesmetro$AREA_NAME)#
metroareas <- str_split(oesmetro$AREA_NAME, "-")#
metrocities <- sapply(metroareas, "[[", 1)#
metrocities <- str_split(metrocities, ",")#
metrocities <- sapply(metrocities, "[[", 1)#
metrocitymerge <- data.frame(metrocities, oesmetro$PRIM_STATE)#
##
citystate <- str_c(metrocities, ", ", oesmetro$PRIM_STATE)#
oesmetro$citystate <- citystate#
oesmetrogeo <- merge(oesmetro, geopop, by.x="citystate", by.y="citystate")#
#
# write.csv(oesmetrogeo, file = "~/Dropbox/msanProject/data/oesmetrogeo.csv")#
#
oohoesmetrogeo <- merge(oesmetrogeo, ooh, by.x="OCC_CODE", by.y="soc_code")#
#
write.csv(oohoesmetrogeo, file = "~/Dropbox/msanProject/oohoesmetrogeo.csv")#
#
oohoesnat <- merge(oesnat, ooh, by.x="OCC_CODE", by.y="soc_code")#
write.csv(oohoesnat, file = "~/Dropbox/msanProject/oohoesnat.csv")#
#
oohoesstate <- merge(oesstate, ooh, by.x="OCC_CODE", by.y="soc_code")#
write.csv(oohoesstate, file = "~/Dropbox/msanProject/oohoesstate.csv")#
#
oesnat$OCC_TITLE <- str_trim(oesnat$OCC_TITLE, side="both") # removes whitespace leading or trailing in strings#
#
# data.frames: oesnat, oesstatepop, oesmetrogeo, ooh
library(stringr)#
library(maptools) #gpclib or rgeos? one or the other is needed#
#gpclibPermit()#
library(data.table) # to remove dups from geolite#
#
oohfile <- read.csv("~/Dropbox/msanPractice/ooh.csv")#
oesnatfile <- read.csv("~/Dropbox/msanPractice/national_M2013_dl.csv")#
oesstatefile <- read.csv("~/Dropbox/msanPractice/state_M2013_dl.csv")#
oesakinfile <- read.csv("~/Dropbox/msanPractice/MSA_M2013_dl_1_AK_IN.csv",#
	na.strings = "")#
oesksnyfile <- read.csv("~/Dropbox/msanPractice/MSA_M2013_dl_2_KS_NY.csv",#
	na.strings = "")#
oesohwyfile <- read.csv("~/Dropbox/msanPractice/MSA_M2013_dl_3_OH_WY.csv",#
	na.strings = "")#
#oesmetrofile <- rbind(oesakin, oesksny, oesohwy)#
# oesakinfile <- oesakinfile[is.na(oesakinfile)]<-NA#
oesakinfile <- as.data.frame(oesakinfile)#
# oesksnyfile <- oesksnyfile[is.na(oesksnyfile)]<-NA#
oesksnyfile <- as.data.frame(oesksnyfile)#
# oesohwyfile <- oesohwyfile[is.na(oesohwyfile)]<-NA#
oesohwyfile <- as.data.frame(oesohwyfile)#
#
ooh <- data.frame(#
	title <- as.character(oohfile$title),#
	description <- as.character(oohfile$description),#
	soc_code <- as.character(oohfile$soc_code),#
	publish_date <- as.character(oohfile$publish_date),#
	median_annual <- as.numeric(oohfile$qf_median_pay_annual_value),#
	median_hourly <- as.numeric(oohfile$qf_median_pay_hourly_value),#
	entry_education <- as.character(oohfile$qf_entry_level_education),#
	number_of_jobs <- as.numeric(oohfile$qf_number_of_jobs),#
	employment_outlook <- as.numeric(oohfile$qf_employment_outlook),#
	employment_openings <- as.numeric(oohfile$qf_employment_openings))#
#
oesnat <- data.frame(#
	OCC_CODE <- as.character(oesnatfile$OCC_CODE),#
	OCC_TITLE <- as.character(oesnatfile$OCC_TITLE),#
	OCC_GROUP <- as.character(oesnatfile$OCC_GROUP),#
	TOT_EMP <- as.numeric(oesnatfile$TOT_EMP),#
	EMP_PRSE <- as.numeric(oesnatfile$EMP_PRSE),#
	H_MEAN <- as.numeric(oesnatfile$H_MEAN),#
	A_MEAN <- as.numeric(oesnatfile$A_MEAN),#
	MEAN_PRSE <- as.numeric(oesnatfile$MEAN_PRSE),#
	H_PCT10 <- as.numeric(oesnatfile$H_PCT10),#
	H_PCT25 <- as.numeric(oesnatfile$H_PCT25),#
	H_MEDIAN <- as.numeric(oesnatfile$H_MEDIAN),#
	H_PCT75 <- as.numeric(oesnatfile$H_PCT75),#
	H_PCT90 <- as.numeric(oesnatfile$H_PCT90),#
	A_PCT10 <- as.numeric(oesnatfile$A_PCT10),#
	A_PCT25 <- as.numeric(oesnatfile$A_PCT25),#
	A_MEDIAN <- as.numeric(oesnatfile$A_MEDIAN),#
	A_PCT75 <- as.numeric(oesnatfile$A_PCT75),#
	A_PCT90 <- as.numeric(oesnatfile$A_PCT90))#
colnames(oesnat) <- c("OCC_CODE", "OCC_TITLE", "OCC_GROUP", "TOT_EMP",#
	"EMP_PRSE", "H_MEAN", "A_MEAN", "MEAN_PRSE", "H_PCT10", "H_PCT25",#
	"H_MEDIAN", "H_PCT75", "H_PCT90", "A_PCT10", "A_PCT25", "A_MEDIAN",#
	"A_PCT75", "A_PCT90")#
#
oesstate <- data.frame(#
	AREA <- as.numeric(oesstatefile$AREA),#
	ST <- as.character(oesstatefile$ST),#
	STATE <- as.character(oesstatefile$STATE),#
	OCC_CODE <- as.character(oesstatefile$OCC_CODE),#
	OCC_TITLE <- as.character(oesstatefile$OCC_TITLE),#
	OCC_GROUP <- as.character(oesstatefile$OCC_GROUP),#
	TOT_EMP <- as.numeric(oesstatefile$TOT_EMP),#
	EMP_PRSE <- as.numeric(oesstatefile$EMP_PRSE),#
	JOBS_1000 <- as.numeric(oesstatefile$JOBS_1000),#
	LOC_Q <- as.numeric(oesstatefile$LOC_Q),#
	H_MEAN <- as.numeric(oesstatefile$H_MEAN),#
	A_MEAN <- as.numeric(oesstatefile$A_MEAN),#
	MEAN_PRSE <- as.numeric(oesstatefile$MEAN_PRSE),#
	H_PCT10 <- as.numeric(oesstatefile$H_PCT10),#
	H_PCT25 <- as.numeric(oesstatefile$H_PCT25),#
	H_MEDIAN <- as.numeric(oesstatefile$H_MEDIAN),#
	H_PCT75 <- as.numeric(oesstatefile$H_PCT75),#
	H_PCT90 <- as.numeric(oesstatefile$H_PCT90),#
	A_PCT10 <- as.numeric(oesstatefile$A_PCT10),#
	A_PCT25 <- as.numeric(oesstatefile$A_PCT25),#
	A_MEDIAN <- as.numeric(oesstatefile$A_MEDIAN),#
	A_PCT75 <- as.numeric(oesstatefile$A_PCT75),#
	A_PCT90 <- as.numeric(oesstatefile$A_PCT90))#
#
colnames(oesstate) <- c("AREA", "ST", "STATE", "OCC_CODE", "OCC_TITLE",#
	"OCC_GROUP", "TOT_EMP", "EMP_PRSE", "JOBS_1000", "LOC_Q", "H_MEAN",#
	"A_MEAN", "MEAN_PRSE", "H_PCT10", "H_PCT25", "H_MEDIAN", "H_PCT75",#
	"H_PCT90", "A_PCT10", "A_PCT25", "A_MEDIAN", "A_PCT75", "A_PCT90")
oesakin <- data.frame(#
	PRIM_STATE <- as.character(oesakinfile$PRIM_STATE),#
	AREA <- as.numeric(oesakinfile$AREA),#
	AREA_NAME <- as.character(oesakinfile$AREA_NAME),#
	OCC_CODE <- as.character(oesakinfile$OCC_CODE),#
	OCC_TITLE <- as.character(oesakinfile$OCC_TITLE),#
	OCC_GROUP <- as.character(oesakinfile$OCC_GROUP),#
	TOT_EMP <- as.numeric(oesakinfile$TOT_EMP),#
	EMP_PRSE <- as.numeric(oesakinfile$EMP_PRSE),#
	JOBS_1000 <- as.numeric(oesakinfile$JOBS_1000),#
	LOC_Q <- as.numeric(oesakinfile$LOC_Q),#
	H_MEAN <- as.numeric(oesakinfile$H_MEAN),#
	A_MEAN <- as.numeric(oesakinfile$A_MEAN),#
	MEAN_PRSE <- as.numeric(oesakinfile$MEAN_PRSE),#
	H_PCT10 <- as.numeric(oesakinfile$H_PCT10),#
	H_PCT25 <- as.numeric(oesakinfile$H_PCT25),#
	H_MEDIAN <- as.numeric(oesakinfile$H_MEDIAN),#
	H_PCT75 <- as.numeric(oesakinfile$H_PCT75),#
	H_PCT90 <- as.numeric(oesakinfile$H_PCT90),#
	A_PCT10 <- as.numeric(oesakinfile$A_PCT10),#
	A_PCT25 <- as.numeric(oesakinfile$A_PCT25),#
	A_MEDIAN <- as.numeric(oesakinfile$A_MEDIAN),#
	A_PCT75 <- as.numeric(oesakinfile$A_PCT75),#
	A_PCT90 <- as.numeric(oesakinfile$A_PCT90))#
#
colnames(oesakin) <- c("PRIM_STATE", "AREA", "AREA_NAME", "OCC_CODE",#
	"OCC_TITLE", "OCC_GROUP", "TOT_EMP", "EMP_PRSE", "JOBS_1000", "LOC_Q",#
	"H_MEAN", "A_MEAN", "MEAN_PRSE", "H_PCT10", "H_PCT25", "H_MEDIAN",#
	"H_PCT75", "H_PCT90", "A_PCT10", "A_PCT25", "A_MEDIAN", "A_PCT75",#
	"A_PCT90")
oesakinfile <- as.data.frame(oesakinfile)
oesksnyfile <- oesksnyfile[is.na(oesksnyfile)]<-NA
oesohwyfile <- oesohwyfile[is.na(oesohwyfile)]<-NA
oesakinfile <- oesakinfile[is.na(oesakinfile)]<-NA
head(akinfile)
head(oesakinfile)
oesakinfile <- read.csv("~/Dropbox/msanPractice/MSA_M2013_dl_1_AK_IN.csv",#
	na.strings = "")
oesakinfile[is.na(oesakinfile)]<-NA
head(oesakinfile)
oesakinfile <- as.data.frame(oesakinfile)
head(oesakinfile)
oesakin <- data.frame(#
	PRIM_STATE <- as.character(oesakinfile$PRIM_STATE),#
	AREA <- as.numeric(oesakinfile$AREA),#
	AREA_NAME <- as.character(oesakinfile$AREA_NAME),#
	OCC_CODE <- as.character(oesakinfile$OCC_CODE),#
	OCC_TITLE <- as.character(oesakinfile$OCC_TITLE),#
	OCC_GROUP <- as.character(oesakinfile$OCC_GROUP),#
	TOT_EMP <- as.numeric(oesakinfile$TOT_EMP),#
	EMP_PRSE <- as.numeric(oesakinfile$EMP_PRSE),#
	JOBS_1000 <- as.numeric(oesakinfile$JOBS_1000),#
	LOC_Q <- as.numeric(oesakinfile$LOC_Q),#
	H_MEAN <- as.numeric(oesakinfile$H_MEAN),#
	A_MEAN <- as.numeric(oesakinfile$A_MEAN),#
	MEAN_PRSE <- as.numeric(oesakinfile$MEAN_PRSE),#
	H_PCT10 <- as.numeric(oesakinfile$H_PCT10),#
	H_PCT25 <- as.numeric(oesakinfile$H_PCT25),#
	H_MEDIAN <- as.numeric(oesakinfile$H_MEDIAN),#
	H_PCT75 <- as.numeric(oesakinfile$H_PCT75),#
	H_PCT90 <- as.numeric(oesakinfile$H_PCT90),#
	A_PCT10 <- as.numeric(oesakinfile$A_PCT10),#
	A_PCT25 <- as.numeric(oesakinfile$A_PCT25),#
	A_MEDIAN <- as.numeric(oesakinfile$A_MEDIAN),#
	A_PCT75 <- as.numeric(oesakinfile$A_PCT75),#
	A_PCT90 <- as.numeric(oesakinfile$A_PCT90))
oesakinfile <- read.csv("~/Dropbox/msanPractice/MSA_M2013_dl_1_AK_IN.csv")
oesakinfile[is.na(oesakinfile)]<-NA#
oesakinfile <- as.data.frame(oesakinfile)
head(oesakinfile)
oesakin <- data.frame(#
	PRIM_STATE <- as.character(oesakinfile$PRIM_STATE),#
	AREA <- as.numeric(oesakinfile$AREA),#
	AREA_NAME <- as.character(oesakinfile$AREA_NAME),#
	OCC_CODE <- as.character(oesakinfile$OCC_CODE),#
	OCC_TITLE <- as.character(oesakinfile$OCC_TITLE),#
	OCC_GROUP <- as.character(oesakinfile$OCC_GROUP),#
	TOT_EMP <- as.numeric(oesakinfile$TOT_EMP),#
	EMP_PRSE <- as.numeric(oesakinfile$EMP_PRSE),#
	JOBS_1000 <- as.numeric(oesakinfile$JOBS_1000),#
	LOC_Q <- as.numeric(oesakinfile$LOC_Q),#
	H_MEAN <- as.numeric(oesakinfile$H_MEAN),#
	A_MEAN <- as.numeric(oesakinfile$A_MEAN),#
	MEAN_PRSE <- as.numeric(oesakinfile$MEAN_PRSE),#
	H_PCT10 <- as.numeric(oesakinfile$H_PCT10),#
	H_PCT25 <- as.numeric(oesakinfile$H_PCT25),#
	H_MEDIAN <- as.numeric(oesakinfile$H_MEDIAN),#
	H_PCT75 <- as.numeric(oesakinfile$H_PCT75),#
	H_PCT90 <- as.numeric(oesakinfile$H_PCT90),#
	A_PCT10 <- as.numeric(oesakinfile$A_PCT10),#
	A_PCT25 <- as.numeric(oesakinfile$A_PCT25),#
	A_MEDIAN <- as.numeric(oesakinfile$A_MEDIAN),#
	A_PCT75 <- as.numeric(oesakinfile$A_PCT75),#
	A_PCT90 <- as.numeric(oesakinfile$A_PCT90))
head(oesakinfile)
library(stringr)#
library(maptools) #gpclib or rgeos? one or the other is needed#
#gpclibPermit()#
library(data.table) # to remove dups from geolite#
#
oohfile <- read.csv("~/Dropbox/msanPractice/ooh.csv")#
oesnatfile <- read.csv("~/Dropbox/msanPractice/national_M2013_dl.csv")#
oesstatefile <- read.csv("~/Dropbox/msanPractice/state_M2013_dl.csv")#
oesakinfile <- read.csv("~/Dropbox/msanPractice/MSA_M2013_dl_1_AK_IN.csv")#
oesksnyfile <- read.csv("~/Dropbox/msanPractice/MSA_M2013_dl_2_KS_NY.csv",#
	na.strings = "")#
oesohwyfile <- read.csv("~/Dropbox/msanPractice/MSA_M2013_dl_3_OH_WY.csv",#
	na.strings = "")
oesakinfile[is.na(oesakinfile)]<-NA
head(oesakinfile)
oesakinfile <- as.data.frame(oesakinfile)
head(oesakinfile)
oesakin <- data.frame(#
	PRIM_STATE <- as.character(oesakinfile$PRIM_STATE),#
	AREA <- as.numeric(oesakinfile$AREA),#
	AREA_NAME <- as.character(oesakinfile$AREA_NAME),#
	OCC_CODE <- as.character(oesakinfile$OCC_CODE),#
	OCC_TITLE <- as.character(oesakinfile$OCC_TITLE),#
	OCC_GROUP <- as.character(oesakinfile$OCC_GROUP),#
	TOT_EMP <- as.numeric(oesakinfile$TOT_EMP),#
	EMP_PRSE <- as.numeric(oesakinfile$EMP_PRSE),#
	JOBS_1000 <- as.numeric(oesakinfile$JOBS_1000),#
	LOC_Q <- as.numeric(oesakinfile$LOC_Q),#
	H_MEAN <- as.numeric(oesakinfile$H_MEAN),#
	A_MEAN <- as.numeric(oesakinfile$A_MEAN),#
	MEAN_PRSE <- as.numeric(oesakinfile$MEAN_PRSE),#
	H_PCT10 <- as.numeric(oesakinfile$H_PCT10),#
	H_PCT25 <- as.numeric(oesakinfile$H_PCT25),#
	H_MEDIAN <- as.numeric(oesakinfile$H_MEDIAN),#
	H_PCT75 <- as.numeric(oesakinfile$H_PCT75),#
	H_PCT90 <- as.numeric(oesakinfile$H_PCT90),#
	A_PCT10 <- as.numeric(oesakinfile$A_PCT10),#
	A_PCT25 <- as.numeric(oesakinfile$A_PCT25),#
	A_MEDIAN <- as.numeric(oesakinfile$A_MEDIAN),#
	A_PCT75 <- as.numeric(oesakinfile$A_PCT75),#
	A_PCT90 <- as.numeric(oesakinfile$A_PCT90))
library(shiny)
runGitHub('msan622', 'j-gilmore', subdir='project-prototype')
library(shiny)
runGitHub('lecturs', username='msan622', subdir='Miscellaneous/DataDemo')
runGitHub('lectures', username='msan622', subdir='Miscellaneous/DataDemo')
library(data.table)#
library(ggplot2)#
library(ggmap)#
library(shiny)#
library(stringr)#
#
data<- file.path(".", "data")))#
#
oohoesnat <- read.csv("/oohoesnat.csv", stringsAsFactors=FALSE)#
oohoesstate <- read.csv("/oohoesstate.csv", stringsAsFactors=FALSE)#
oohoesmetrogeo <- read.csv("/oohoesmetrogeo.csv", stringsAsFactors=FALSE)#
stateneighbors <- read.csv("/neighbors.csv")#
statelatloncenter <- read.csv("/state_latlon.csv")#
#
text_function <- function(df, occ) {#
	subset <- df[which(df$OCC_CODE==occ),]#
	subset$description <- as.character(subset$description)#
	textout <- subset$description[[1]][1]#
	return(print(textout))#
}#
#
# text_function(oohoesmetrogeo, "11-1011")#
#
table_function <- function(df, occ, statevar, tsort) {#
	subset <- df[which(df$OCC_CODE==occ & df$PRIM_STATE==statevar),]#
	subset <- subset[c(3,9,11,13,14)]#
	subset$JOBS_1000 <- as.numeric(subset$JOBS_1000)#
	subset$H_MEAN <- as.numeric(subset$H_MEAN)	#
	if(tsort=="TOT_EMP") {#
		subset <- subset[order(-subset$TOT_EMP),]	#
	}#
	if(tsort=="JOBS_1000") {#
		subset <- subset[order(-subset$JOBS_1000),]	#
	}#
	if(tsort=="H_MEAN") {#
		subset <- subset[order(-subset$H_MEAN),]	#
	}#
	if(tsort=="A_MEAN") {#
		subset <- subset[order(-subset$A_MEAN),]	#
	}	#
	subset <- subset[1:10,]#
	colnames(subset) <- c("City", "TotalEmployed", "JobsPer1000", "HourlyMean", "AnnualMean")#
	describetable <- data.table(subset)#
	return(describetable)#
}#
#
# table_function(oohoesmetrogeo, "11-1011", "CA", "TOT_EMP")#
#
plot_function <- function(df, occ, statevar, var, zoomval, latnudge, lonnudge, stateneighbors) {#
	statecenter<- statelatloncenter[which(statelatloncenter$state==statevar),]#
	statecenter<- c(statecenter$longitude, statecenter$latitude)#
	statezoom<- statelatloncenter[which(statelatloncenter$state==statevar),]#
	statezoom<- statezoom$zoomval#
	map<- get_map(statecenter, zoom=statezoom, color="bw")#
	# maptype="satellite"#
	# color = "bw"#
	statensub<- stateneighbors[which(stateneighbors$state==statevar),]#
	staten <- str_split(statensub$neighbors, ", ")#
	staten <- staten[[1]]#
	subsetdf <- df[which(df$OCC_CODE==occ & df$PRIM_STATE==statevar),]#
	subsetn <- df[which(df$OCC_CODE==occ & df$PRIM_STATE==staten),]#
#
	assign("subsetdf", subsetdf, envir=globalenv())#
	assign("subsetn", subsetn, envir=globalenv())#
#
	# if(var=="TOT_EMP") {#
		# var_input <- subsetdf$TOT_EMP#
		# return(var_input)#
	# }#
#
	titlelab <- paste(subsetdf$OCC_TITLE, ": sized by Total Employed", sep="")#
#
	p <- ggmap(map, extent = "panel", maprange=FALSE) +#
		geom_point(data=subsetdf, aes(x=longitude, y=latitude, #
		size = subsetdf$TOT_EMP),#
		colour = "red",#
		alpha = .7) +#
		# geom_text(data = subsetdf, aes(x=longitude, y=latitude,#
		# label = subsetdf$A_MEDIAN), size = 4) +#
		geom_point(data=subsetn, aes(x=longitude, y=latitude),#
		colour = "blue",#
		alpha = 1, size = 4) +#
		# geom_polygon(aes(x = long, y = lat, group = group), data = datam,#
		# colour = "white", fill = "black", alpha = .4, size = .3) +#
		scale_size_area(max_size=10, guide = "none") +#
		ggtitle(titlelab) +#
		theme(plot.title = element_text(size=18, face="bold")) +#
		theme(plot.title = element_text(vjust=2)) +#
		# annotate("text", y=max(subsetdf$latitude),#
		# x=max(subsetdf$longitude), label=titlelab, hjust=1) +#
		theme(axis.ticks.x = element_blank()) +#
		theme(axis.ticks.y = element_blank()) +#
		theme(axis.text.x = element_blank()) +#
		theme(axis.text.y = element_blank()) +#
		theme(legend.position = "none", axis.title=element_blank(), #
			text = element_text(size=12))#
	return(print(p))#
}#
#
# plot_function(oohoesmetrogeo, "Chief Executives", "NY", "TOT_EMP", 6, 0, 0, stateneighbors)#
#
shinyServer(function(input, output) {#
	cat("Press \"ESC\" to exit...\n")#
#
	output$ui <- renderUI({#
		if (is.null(input$input_type))#
			return()#
		switch(input$input_type,#
			"Management" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Chief Executives" = "11-1011",#
							"Advertising and Promotions" = "11-2011",#
							"Sales Managers" = "11-2022",#
							"Public Relations and Fund Raising" = "11-2031",#
							"Administrative Service Managers" = "11-3011",#
							"Computer and Info Systems Management" = "11-3021",#
							"Financial Managers" = "11-3031",#
							"Industrial Production Managers" = "11=3051",#
							"Purchasing Managers" = "11-3061",#
							"Compensation and Benefits Managers" = "11-3111",#
							"Human Resource Managers" = "11-3121",#
							"Training and Development Managers" = "11-3131",#
							"Farmers, Ranchers, and Other Agg Managers" = "11-9013",#
							"Construction Managers" = "11-9021",#
							"Education Administrators, Preschool and Childcare" = "11-9031",#
							"Education Administrators, Elementary and Secondary Ed." = "11-9032",#
							"Education Administrators, Postsecondary" = "11-9033",#
							"Architectural and Engineering Managers" = "11-9041",#
							"Food Service Managers" = "11-9051",#
							"Gaming Managers" = "11-9071",#
							"Lodging Managers" = "11-9081",#
							"Medical and Health Services Managers" = "11-9111",#
							"Natural Sciences Managers" = "11-9121",#
							"Property, Real Estate, and Community Association Managers" = "11-9141",#
							"Social and Community Service Managers" = "11-9151"#
							),#
						selected = "11-1011"#
					)#
				)),#
			"Additional Industry" = fluidRow(#
				column(12,#
					br(),#
					radioButtons("areatype", h5("Type of Area Chart"),#
						choices = c("Fixed Coordinates" = "areafixed",#
									"Polar Coordinates" = "areapolar"),#
						selected = "areafixed"#
					),#
					includeHTML("aboutareacharts.html")#
				)#
			),#
			"Additional Industry" = fluidRow(#
				column(12,#
					br(),#
					radioButtons("smtype", h5("Type of Multiples Plot"),#
						choices = c("Small Multiples" = "smfacet",#
									"Polar Coordinates" = "smpolar"),#
						selected = "smfacet"#
					),#
					includeHTML("aboutmultiline.html")#
				)#
				)#
		)#
	})#
	getindustry <- reactive({#
		results <- input$input_type#
		return(results)#
	})#
	getheat <- reactive({#
		if(input$input_type=="Heatmaps") {#
			results <- "RdBu"#
		}#
		else {#
			results <- "Set1"#
		}#
		return(results)#
	})#
	getocc <- reactive ({#
		results <- input$occ#
		return(results)#
	})#
	getstate <- reactive ({#
		results <- input$state_select#
		return(results)#
	})#
	gettsort <- reactive ({#
		results <- input$table_sort#
		return(results)#
	})#
	getlon <- reactive ({#
		results <- input$lonnudge#
		return(results)#
	})#
	getlat <- reactive ({#
		results <- input$latnudge#
		return(results)#
	})#
#
	output$textResults <- renderText ({#
		textResults <- text_function(oohoesmetrogeo, getocc())#
	})#
	output$tableResults <- renderTable ({#
		tableResults <- table_function(oohoesmetrogeo, getocc(), getstate(),#
			gettsort())#
	})#
#
	output$plotResults <- renderPlot ({#
		plotResults <- plot_function(oohoesmetrogeo, getocc(), getstate(), #
		getvar(), 6, getlat(), getlon(), stateneighbors)#
		print(plotResults)#
	}, width = 700, height = 600)#
})
library(data.table)#
library(ggplot2)#
library(ggmap)#
library(shiny)#
library(stringr)#
#
datapath<- file.path(".", "data")))#
#
oohoesnat <- read.csv(datapath"/oohoesnat.csv", stringsAsFactors=FALSE)#
oohoesstate <- read.csv(datapath"/oohoesstate.csv", stringsAsFactors=FALSE)#
oohoesmetrogeo <- read.csv(datapath"/oohoesmetrogeo.csv", stringsAsFactors=FALSE)#
stateneighbors <- read.csv(datapath"/neighbors.csv")#
statelatloncenter <- read.csv(datapath"/state_latlon.csv")#
#
text_function <- function(df, occ) {#
	subset <- df[which(df$OCC_CODE==occ),]#
	subset$description <- as.character(subset$description)#
	textout <- subset$description[[1]][1]#
	return(print(textout))#
}#
#
# text_function(oohoesmetrogeo, "11-1011")#
#
table_function <- function(df, occ, statevar, tsort) {#
	subset <- df[which(df$OCC_CODE==occ & df$PRIM_STATE==statevar),]#
	subset <- subset[c(3,9,11,13,14)]#
	subset$JOBS_1000 <- as.numeric(subset$JOBS_1000)#
	subset$H_MEAN <- as.numeric(subset$H_MEAN)	#
	if(tsort=="TOT_EMP") {#
		subset <- subset[order(-subset$TOT_EMP),]	#
	}#
	if(tsort=="JOBS_1000") {#
		subset <- subset[order(-subset$JOBS_1000),]	#
	}#
	if(tsort=="H_MEAN") {#
		subset <- subset[order(-subset$H_MEAN),]	#
	}#
	if(tsort=="A_MEAN") {#
		subset <- subset[order(-subset$A_MEAN),]	#
	}	#
	subset <- subset[1:10,]#
	colnames(subset) <- c("City", "TotalEmployed", "JobsPer1000", "HourlyMean", "AnnualMean")#
	describetable <- data.table(subset)#
	return(describetable)#
}#
#
# table_function(oohoesmetrogeo, "11-1011", "CA", "TOT_EMP")#
#
plot_function <- function(df, occ, statevar, var, zoomval, latnudge, lonnudge, stateneighbors) {#
	statecenter<- statelatloncenter[which(statelatloncenter$state==statevar),]#
	statecenter<- c(statecenter$longitude, statecenter$latitude)#
	statezoom<- statelatloncenter[which(statelatloncenter$state==statevar),]#
	statezoom<- statezoom$zoomval#
	map<- get_map(statecenter, zoom=statezoom, color="bw")#
	# maptype="satellite"#
	# color = "bw"#
	statensub<- stateneighbors[which(stateneighbors$state==statevar),]#
	staten <- str_split(statensub$neighbors, ", ")#
	staten <- staten[[1]]#
	subsetdf <- df[which(df$OCC_CODE==occ & df$PRIM_STATE==statevar),]#
	subsetn <- df[which(df$OCC_CODE==occ & df$PRIM_STATE==staten),]#
#
	assign("subsetdf", subsetdf, envir=globalenv())#
	assign("subsetn", subsetn, envir=globalenv())#
#
	# if(var=="TOT_EMP") {#
		# var_input <- subsetdf$TOT_EMP#
		# return(var_input)#
	# }#
#
	titlelab <- paste(subsetdf$OCC_TITLE, ": sized by Total Employed", sep="")#
#
	p <- ggmap(map, extent = "panel", maprange=FALSE) +#
		geom_point(data=subsetdf, aes(x=longitude, y=latitude, #
		size = subsetdf$TOT_EMP),#
		colour = "red",#
		alpha = .7) +#
		# geom_text(data = subsetdf, aes(x=longitude, y=latitude,#
		# label = subsetdf$A_MEDIAN), size = 4) +#
		geom_point(data=subsetn, aes(x=longitude, y=latitude),#
		colour = "blue",#
		alpha = 1, size = 4) +#
		# geom_polygon(aes(x = long, y = lat, group = group), data = datam,#
		# colour = "white", fill = "black", alpha = .4, size = .3) +#
		scale_size_area(max_size=10, guide = "none") +#
		ggtitle(titlelab) +#
		theme(plot.title = element_text(size=18, face="bold")) +#
		theme(plot.title = element_text(vjust=2)) +#
		# annotate("text", y=max(subsetdf$latitude),#
		# x=max(subsetdf$longitude), label=titlelab, hjust=1) +#
		theme(axis.ticks.x = element_blank()) +#
		theme(axis.ticks.y = element_blank()) +#
		theme(axis.text.x = element_blank()) +#
		theme(axis.text.y = element_blank()) +#
		theme(legend.position = "none", axis.title=element_blank(), #
			text = element_text(size=12))#
	return(print(p))#
}#
#
# plot_function(oohoesmetrogeo, "Chief Executives", "NY", "TOT_EMP", 6, 0, 0, stateneighbors)#
#
shinyServer(function(input, output) {#
	cat("Press \"ESC\" to exit...\n")#
#
	output$ui <- renderUI({#
		if (is.null(input$input_type))#
			return()#
		switch(input$input_type,#
			"Management" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Chief Executives" = "11-1011",#
							"Advertising and Promotions" = "11-2011",#
							"Sales Managers" = "11-2022",#
							"Public Relations and Fund Raising" = "11-2031",#
							"Administrative Service Managers" = "11-3011",#
							"Computer and Info Systems Management" = "11-3021",#
							"Financial Managers" = "11-3031",#
							"Industrial Production Managers" = "11=3051",#
							"Purchasing Managers" = "11-3061",#
							"Compensation and Benefits Managers" = "11-3111",#
							"Human Resource Managers" = "11-3121",#
							"Training and Development Managers" = "11-3131",#
							"Farmers, Ranchers, and Other Agg Managers" = "11-9013",#
							"Construction Managers" = "11-9021",#
							"Education Administrators, Preschool and Childcare" = "11-9031",#
							"Education Administrators, Elementary and Secondary Ed." = "11-9032",#
							"Education Administrators, Postsecondary" = "11-9033",#
							"Architectural and Engineering Managers" = "11-9041",#
							"Food Service Managers" = "11-9051",#
							"Gaming Managers" = "11-9071",#
							"Lodging Managers" = "11-9081",#
							"Medical and Health Services Managers" = "11-9111",#
							"Natural Sciences Managers" = "11-9121",#
							"Property, Real Estate, and Community Association Managers" = "11-9141",#
							"Social and Community Service Managers" = "11-9151"#
							),#
						selected = "11-1011"#
					)#
				)),#
			"Additional Industry" = fluidRow(#
				column(12,#
					br(),#
					radioButtons("areatype", h5("Type of Area Chart"),#
						choices = c("Fixed Coordinates" = "areafixed",#
									"Polar Coordinates" = "areapolar"),#
						selected = "areafixed"#
					),#
					includeHTML("aboutareacharts.html")#
				)#
			),#
			"Additional Industry" = fluidRow(#
				column(12,#
					br(),#
					radioButtons("smtype", h5("Type of Multiples Plot"),#
						choices = c("Small Multiples" = "smfacet",#
									"Polar Coordinates" = "smpolar"),#
						selected = "smfacet"#
					),#
					includeHTML("aboutmultiline.html")#
				)#
				)#
		)#
	})#
	getindustry <- reactive({#
		results <- input$input_type#
		return(results)#
	})#
	getheat <- reactive({#
		if(input$input_type=="Heatmaps") {#
			results <- "RdBu"#
		}#
		else {#
			results <- "Set1"#
		}#
		return(results)#
	})#
	getocc <- reactive ({#
		results <- input$occ#
		return(results)#
	})#
	getstate <- reactive ({#
		results <- input$state_select#
		return(results)#
	})#
	gettsort <- reactive ({#
		results <- input$table_sort#
		return(results)#
	})#
	getlon <- reactive ({#
		results <- input$lonnudge#
		return(results)#
	})#
	getlat <- reactive ({#
		results <- input$latnudge#
		return(results)#
	})#
#
	output$textResults <- renderText ({#
		textResults <- text_function(oohoesmetrogeo, getocc())#
	})#
	output$tableResults <- renderTable ({#
		tableResults <- table_function(oohoesmetrogeo, getocc(), getstate(),#
			gettsort())#
	})#
#
	output$plotResults <- renderPlot ({#
		plotResults <- plot_function(oohoesmetrogeo, getocc(), getstate(), #
		getvar(), 6, getlat(), getlon(), stateneighbors)#
		print(plotResults)#
	}, width = 700, height = 600)#
})
library(data.table)#
library(ggplot2)#
library(ggmap)#
library(shiny)#
library(stringr)#
#
# source(DirSource(directory=file.path("data")))#
#
oohoesnat <- read.csv("./Data/oohoesnat.csv", stringsAsFactors=FALSE)#
oohoesstate <- read.csv("./Data/oohoesstate.csv", stringsAsFactors=FALSE)#
oohoesmetrogeo <- read.csv("./Data/oohoesmetrogeo.csv", stringsAsFactors=FALSE)#
stateneighbors <- read.csv("./Data/neighbors.csv")#
statelatloncenter <- read.csv("./Data/state_latlon.csv")#
#
text_function <- function(df, occ) {#
	subset <- df[which(df$OCC_CODE==occ),]#
	subset$description <- as.character(subset$description)#
	textout <- subset$description[[1]][1]#
	return(print(textout))#
}#
#
# text_function(oohoesmetrogeo, "11-1011")#
#
table_function <- function(df, occ, statevar, tsort) {#
	subset <- df[which(df$OCC_CODE==occ & df$PRIM_STATE==statevar),]#
	subset <- subset[c(3,9,11,13,14)]#
	subset$JOBS_1000 <- as.numeric(subset$JOBS_1000)#
	subset$H_MEAN <- as.numeric(subset$H_MEAN)	#
	if(tsort=="TOT_EMP") {#
		subset <- subset[order(-subset$TOT_EMP),]	#
	}#
	if(tsort=="JOBS_1000") {#
		subset <- subset[order(-subset$JOBS_1000),]	#
	}#
	if(tsort=="H_MEAN") {#
		subset <- subset[order(-subset$H_MEAN),]	#
	}#
	if(tsort=="A_MEAN") {#
		subset <- subset[order(-subset$A_MEAN),]	#
	}	#
	subset <- subset[1:10,]#
	colnames(subset) <- c("City", "TotalEmployed", "JobsPer1000", "HourlyMean", "AnnualMean")#
	describetable <- data.table(subset)#
	return(describetable)#
}#
#
# table_function(oohoesmetrogeo, "11-1011", "CA", "TOT_EMP")#
#
plot_function <- function(df, occ, statevar, var, zoomval, latnudge, lonnudge, stateneighbors) {#
	statecenter<- statelatloncenter[which(statelatloncenter$state==statevar),]#
	statecenter<- c(statecenter$longitude, statecenter$latitude)#
	statezoom<- statelatloncenter[which(statelatloncenter$state==statevar),]#
	statezoom<- statezoom$zoomval#
	map<- get_map(statecenter, zoom=statezoom, color="bw")#
	# maptype="satellite"#
	# color = "bw"#
	statensub<- stateneighbors[which(stateneighbors$state==statevar),]#
	staten <- str_split(statensub$neighbors, ", ")#
	staten <- staten[[1]]#
	subsetdf <- df[which(df$OCC_CODE==occ & df$PRIM_STATE==statevar),]#
	subsetn <- df[which(df$OCC_CODE==occ & df$PRIM_STATE==staten),]#
#
	assign("subsetdf", subsetdf, envir=globalenv())#
	assign("subsetn", subsetn, envir=globalenv())#
#
	# if(var=="TOT_EMP") {#
		# var_input <- subsetdf$TOT_EMP#
		# return(var_input)#
	# }#
#
	titlelab <- paste(subsetdf$OCC_TITLE, ": sized by Total Employed", sep="")#
#
	p <- ggmap(map, extent = "panel", maprange=FALSE) +#
		geom_point(data=subsetdf, aes(x=longitude, y=latitude, #
		size = subsetdf$TOT_EMP),#
		colour = "red",#
		alpha = .7) +#
		# geom_text(data = subsetdf, aes(x=longitude, y=latitude,#
		# label = subsetdf$A_MEDIAN), size = 4) +#
		geom_point(data=subsetn, aes(x=longitude, y=latitude),#
		colour = "blue",#
		alpha = 1, size = 4) +#
		# geom_polygon(aes(x = long, y = lat, group = group), data = datam,#
		# colour = "white", fill = "black", alpha = .4, size = .3) +#
		scale_size_area(max_size=10, guide = "none") +#
		ggtitle(titlelab) +#
		theme(plot.title = element_text(size=18, face="bold")) +#
		theme(plot.title = element_text(vjust=2)) +#
		# annotate("text", y=max(subsetdf$latitude),#
		# x=max(subsetdf$longitude), label=titlelab, hjust=1) +#
		theme(axis.ticks.x = element_blank()) +#
		theme(axis.ticks.y = element_blank()) +#
		theme(axis.text.x = element_blank()) +#
		theme(axis.text.y = element_blank()) +#
		theme(legend.position = "none", axis.title=element_blank(), #
			text = element_text(size=12))#
	return(print(p))#
}#
#
# plot_function(oohoesmetrogeo, "Chief Executives", "NY", "TOT_EMP", 6, 0, 0, stateneighbors)#
#
shinyServer(function(input, output) {#
	cat("Press \"ESC\" to exit...\n")#
#
	output$ui <- renderUI({#
		if (is.null(input$input_type))#
			return()#
		switch(input$input_type,#
			"Management" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Chief Executives" = "11-1011",#
							"Advertising and Promotions" = "11-2011",#
							"Sales Managers" = "11-2022",#
							"Public Relations and Fund Raising" = "11-2031",#
							"Administrative Service Managers" = "11-3011",#
							"Computer and Info Systems Management" = "11-3021",#
							"Financial Managers" = "11-3031",#
							"Industrial Production Managers" = "11=3051",#
							"Purchasing Managers" = "11-3061",#
							"Compensation and Benefits Managers" = "11-3111",#
							"Human Resource Managers" = "11-3121",#
							"Training and Development Managers" = "11-3131",#
							"Farmers, Ranchers, and Other Agg Managers" = "11-9013",#
							"Construction Managers" = "11-9021",#
							"Education Administrators, Preschool and Childcare" = "11-9031",#
							"Education Administrators, Elementary and Secondary Ed." = "11-9032",#
							"Education Administrators, Postsecondary" = "11-9033",#
							"Architectural and Engineering Managers" = "11-9041",#
							"Food Service Managers" = "11-9051",#
							"Gaming Managers" = "11-9071",#
							"Lodging Managers" = "11-9081",#
							"Medical and Health Services Managers" = "11-9111",#
							"Natural Sciences Managers" = "11-9121",#
							"Property, Real Estate, and Community Association Managers" = "11-9141",#
							"Social and Community Service Managers" = "11-9151"#
							),#
						selected = "11-1011"#
					)#
				)),#
			"Additional Industry" = fluidRow(#
				column(12,#
					br(),#
					radioButtons("areatype", h5("Type of Area Chart"),#
						choices = c("Fixed Coordinates" = "areafixed",#
									"Polar Coordinates" = "areapolar"),#
						selected = "areafixed"#
					),#
					includeHTML("aboutareacharts.html")#
				)#
			),#
			"Additional Industry" = fluidRow(#
				column(12,#
					br(),#
					radioButtons("smtype", h5("Type of Multiples Plot"),#
						choices = c("Small Multiples" = "smfacet",#
									"Polar Coordinates" = "smpolar"),#
						selected = "smfacet"#
					),#
					includeHTML("aboutmultiline.html")#
				)#
				)#
		)#
	})#
	getindustry <- reactive({#
		results <- input$input_type#
		return(results)#
	})#
	getheat <- reactive({#
		if(input$input_type=="Heatmaps") {#
			results <- "RdBu"#
		}#
		else {#
			results <- "Set1"#
		}#
		return(results)#
	})#
	getocc <- reactive ({#
		results <- input$occ#
		return(results)#
	})#
	getstate <- reactive ({#
		results <- input$state_select#
		return(results)#
	})#
	gettsort <- reactive ({#
		results <- input$table_sort#
		return(results)#
	})#
	getlon <- reactive ({#
		results <- input$lonnudge#
		return(results)#
	})#
	getlat <- reactive ({#
		results <- input$latnudge#
		return(results)#
	})#
#
	output$textResults <- renderText ({#
		textResults <- text_function(oohoesmetrogeo, getocc())#
	})#
	output$tableResults <- renderTable ({#
		tableResults <- table_function(oohoesmetrogeo, getocc(), getstate(),#
			gettsort())#
	})#
#
	output$plotResults <- renderPlot ({#
		plotResults <- plot_function(oohoesmetrogeo, getocc(), getstate(), #
		getvar(), 6, getlat(), getlon(), stateneighbors)#
		print(plotResults)#
	}, width = 700, height = 600)#
})
library(data.table)#
library(ggplot2)#
library(ggmap)#
library(shiny)#
library(stringr)#
#
# source(DirSource(directory=file.path("data")))#
datapathoohnat <- file.path(".", "data", "oohnat.csv")#
oohoesnat <- read.csv(datapathoohnat, stringsAsFactors=FALSE)#
oohoesstate <- read.csv("./Data/oohoesstate.csv", stringsAsFactors=FALSE)#
oohoesmetrogeo <- read.csv("./Data/oohoesmetrogeo.csv", stringsAsFactors=FALSE)#
stateneighbors <- read.csv("./Data/neighbors.csv")#
statelatloncenter <- read.csv("./Data/state_latlon.csv")#
#
text_function <- function(df, occ) {#
	subset <- df[which(df$OCC_CODE==occ),]#
	subset$description <- as.character(subset$description)#
	textout <- subset$description[[1]][1]#
	return(print(textout))#
}#
#
# text_function(oohoesmetrogeo, "11-1011")#
#
table_function <- function(df, occ, statevar, tsort) {#
	subset <- df[which(df$OCC_CODE==occ & df$PRIM_STATE==statevar),]#
	subset <- subset[c(3,9,11,13,14)]#
	subset$JOBS_1000 <- as.numeric(subset$JOBS_1000)#
	subset$H_MEAN <- as.numeric(subset$H_MEAN)	#
	if(tsort=="TOT_EMP") {#
		subset <- subset[order(-subset$TOT_EMP),]	#
	}#
	if(tsort=="JOBS_1000") {#
		subset <- subset[order(-subset$JOBS_1000),]	#
	}#
	if(tsort=="H_MEAN") {#
		subset <- subset[order(-subset$H_MEAN),]	#
	}#
	if(tsort=="A_MEAN") {#
		subset <- subset[order(-subset$A_MEAN),]	#
	}	#
	subset <- subset[1:10,]#
	colnames(subset) <- c("City", "TotalEmployed", "JobsPer1000", "HourlyMean", "AnnualMean")#
	describetable <- data.table(subset)#
	return(describetable)#
}#
#
# table_function(oohoesmetrogeo, "11-1011", "CA", "TOT_EMP")#
#
plot_function <- function(df, occ, statevar, var, zoomval, latnudge, lonnudge, stateneighbors) {#
	statecenter<- statelatloncenter[which(statelatloncenter$state==statevar),]#
	statecenter<- c(statecenter$longitude, statecenter$latitude)#
	statezoom<- statelatloncenter[which(statelatloncenter$state==statevar),]#
	statezoom<- statezoom$zoomval#
	map<- get_map(statecenter, zoom=statezoom, color="bw")#
	# maptype="satellite"#
	# color = "bw"#
	statensub<- stateneighbors[which(stateneighbors$state==statevar),]#
	staten <- str_split(statensub$neighbors, ", ")#
	staten <- staten[[1]]#
	subsetdf <- df[which(df$OCC_CODE==occ & df$PRIM_STATE==statevar),]#
	subsetn <- df[which(df$OCC_CODE==occ & df$PRIM_STATE==staten),]#
#
	assign("subsetdf", subsetdf, envir=globalenv())#
	assign("subsetn", subsetn, envir=globalenv())#
#
	# if(var=="TOT_EMP") {#
		# var_input <- subsetdf$TOT_EMP#
		# return(var_input)#
	# }#
#
	titlelab <- paste(subsetdf$OCC_TITLE, ": sized by Total Employed", sep="")#
#
	p <- ggmap(map, extent = "panel", maprange=FALSE) +#
		geom_point(data=subsetdf, aes(x=longitude, y=latitude, #
		size = subsetdf$TOT_EMP),#
		colour = "red",#
		alpha = .7) +#
		# geom_text(data = subsetdf, aes(x=longitude, y=latitude,#
		# label = subsetdf$A_MEDIAN), size = 4) +#
		geom_point(data=subsetn, aes(x=longitude, y=latitude),#
		colour = "blue",#
		alpha = 1, size = 4) +#
		# geom_polygon(aes(x = long, y = lat, group = group), data = datam,#
		# colour = "white", fill = "black", alpha = .4, size = .3) +#
		scale_size_area(max_size=10, guide = "none") +#
		ggtitle(titlelab) +#
		theme(plot.title = element_text(size=18, face="bold")) +#
		theme(plot.title = element_text(vjust=2)) +#
		# annotate("text", y=max(subsetdf$latitude),#
		# x=max(subsetdf$longitude), label=titlelab, hjust=1) +#
		theme(axis.ticks.x = element_blank()) +#
		theme(axis.ticks.y = element_blank()) +#
		theme(axis.text.x = element_blank()) +#
		theme(axis.text.y = element_blank()) +#
		theme(legend.position = "none", axis.title=element_blank(), #
			text = element_text(size=12))#
	return(print(p))#
}#
#
# plot_function(oohoesmetrogeo, "Chief Executives", "NY", "TOT_EMP", 6, 0, 0, stateneighbors)#
#
shinyServer(function(input, output) {#
	cat("Press \"ESC\" to exit...\n")#
#
	output$ui <- renderUI({#
		if (is.null(input$input_type))#
			return()#
		switch(input$input_type,#
			"Management" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Chief Executives" = "11-1011",#
							"Advertising and Promotions" = "11-2011",#
							"Sales Managers" = "11-2022",#
							"Public Relations and Fund Raising" = "11-2031",#
							"Administrative Service Managers" = "11-3011",#
							"Computer and Info Systems Management" = "11-3021",#
							"Financial Managers" = "11-3031",#
							"Industrial Production Managers" = "11=3051",#
							"Purchasing Managers" = "11-3061",#
							"Compensation and Benefits Managers" = "11-3111",#
							"Human Resource Managers" = "11-3121",#
							"Training and Development Managers" = "11-3131",#
							"Farmers, Ranchers, and Other Agg Managers" = "11-9013",#
							"Construction Managers" = "11-9021",#
							"Education Administrators, Preschool and Childcare" = "11-9031",#
							"Education Administrators, Elementary and Secondary Ed." = "11-9032",#
							"Education Administrators, Postsecondary" = "11-9033",#
							"Architectural and Engineering Managers" = "11-9041",#
							"Food Service Managers" = "11-9051",#
							"Gaming Managers" = "11-9071",#
							"Lodging Managers" = "11-9081",#
							"Medical and Health Services Managers" = "11-9111",#
							"Natural Sciences Managers" = "11-9121",#
							"Property, Real Estate, and Community Association Managers" = "11-9141",#
							"Social and Community Service Managers" = "11-9151"#
							),#
						selected = "11-1011"#
					)#
				)),#
			"Additional Industry" = fluidRow(#
				column(12,#
					br(),#
					radioButtons("areatype", h5("Type of Area Chart"),#
						choices = c("Fixed Coordinates" = "areafixed",#
									"Polar Coordinates" = "areapolar"),#
						selected = "areafixed"#
					),#
					includeHTML("aboutareacharts.html")#
				)#
			),#
			"Additional Industry" = fluidRow(#
				column(12,#
					br(),#
					radioButtons("smtype", h5("Type of Multiples Plot"),#
						choices = c("Small Multiples" = "smfacet",#
									"Polar Coordinates" = "smpolar"),#
						selected = "smfacet"#
					),#
					includeHTML("aboutmultiline.html")#
				)#
				)#
		)#
	})#
	getindustry <- reactive({#
		results <- input$input_type#
		return(results)#
	})#
	getheat <- reactive({#
		if(input$input_type=="Heatmaps") {#
			results <- "RdBu"#
		}#
		else {#
			results <- "Set1"#
		}#
		return(results)#
	})#
	getocc <- reactive ({#
		results <- input$occ#
		return(results)#
	})#
	getstate <- reactive ({#
		results <- input$state_select#
		return(results)#
	})#
	gettsort <- reactive ({#
		results <- input$table_sort#
		return(results)#
	})#
	getlon <- reactive ({#
		results <- input$lonnudge#
		return(results)#
	})#
	getlat <- reactive ({#
		results <- input$latnudge#
		return(results)#
	})#
#
	output$textResults <- renderText ({#
		textResults <- text_function(oohoesmetrogeo, getocc())#
	})#
	output$tableResults <- renderTable ({#
		tableResults <- table_function(oohoesmetrogeo, getocc(), getstate(),#
			gettsort())#
	})#
#
	output$plotResults <- renderPlot ({#
		plotResults <- plot_function(oohoesmetrogeo, getocc(), getstate(), #
		getvar(), 6, getlat(), getlon(), stateneighbors)#
		print(plotResults)#
	}, width = 700, height = 600)#
})
setwd("~/Documents/DataVis/msan622/final-project")
library(shiny)#
#
shinyServer(function(input, output) {#
	cat("Press \"ESC\" to exit...\n")#
#
	output$dataadd <- renderUI({#
		if (is.null(input$dataplotbutton))#
			return()#
		switch(input$dataplotbutton,#
			"Industry" = fluidRow(#
				column(12,#
					radioButtons("addstates", h5("Add States?"),#
						choices = c("Yes" = "Yes",#
								"No" = "No"),#
						selected = "No"#
					))),#
			"States" = fluidRow(#
				column(12,#
					radioButtons("addprofs", h5("Add Professions?"),#
						choices = c("Yes" = "Yes",#
								"No" = "No"),#
						selected = "No"#
					)))#
				) })#
#
	output$treeui <- renderUI({#
		if (is.null(input$tree_df))#
			return()#
		switch(input$tree_df,#
			"State" = fluidRow(#
				column(12,#
					selectInput("tree_state", h5("Select State"),#
						c("Alabama" = "AL", "Alaska" = "AK", "Arizona" = "AZ", "Arkansas" = "AR", "California" = "CA", "Colorado" = "CO", "Connecticut" = "CT", "Delaware" = "DE", "District of Columbia" = "DC", "Florida" = "FL", "Georgia" = "GA", "Hawaii" = "HI", "Idaho" = "ID", "Illinois" = "IL", "Indiana" = "IN", "Iowa" = "IA", "Kansas" = "KS", "Kentucky" = "KY", "Louisiana" = "LA", "Maine" = "ME", "Maryland" = "MD", "Massachusetts" = "MA", "Michigan" = "MI", "Minnesota" = "MN", "Mississippi" = "MS", "Missouri" = "MO", "Montana" = "MT", "Nebraska" = "NE", "Nevada" = "NV", "New Hampshire" = "NH", "New Jersey" = "NJ", "New Mexico" = "NM", "New York" = "NY", "North Carolina" = "NC", "North Dakota" = "ND", "Ohio" = "OH", "Oklahoma" = "OK", "Oregon" = "OR", "Pennsylvania" = "PA", "Rhode Island" = "RI", "South Carolina" = "SC", "South Dakota" = "SD", "Tennessee" = "TN", "Texas" = "TX", "Utah" = "UT", "Vermont" = "VT", "Virginia" = "VA", "Washington" = "WA", "West Virginia" = "WV", "Wisconsin" = "WI", "Wyoming" = "WY"),#
						selected = "CA")#
				)#
			),#
			"Industry" = fluidRow(#
				column(12,#
					# br(),#
					uiOutput("tree_profui")#
				)#
			)			#
		)#
	})#
	output$tree_profui <- renderUI({#
		if (is.null(input$tree_industry))#
			return()#
		switch(input$tree_industry,#
			"Management" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Administrative Service Managers" = "11-3011",#
							"Advertising and Promotions Managers" = "11-2011",#
							"Architectural and Engineering Managers" = "11-9041",#
							"Chief Executives" = "11-1011",#
							"Compensation and Benefits Managers" = "11-3111",#
							"Computer and Information Systems Managers" = "11-3021",#
							"Construction Managers" = "11-9021",#
							"Education Administrators, Elementary and Secondary School" = "11-9032",#
							"Educaiton Administrators, Postsecondary" = "11-9033",#
							"Education Administrators, Preschool and Childcare Center/Program" = "11-9031",#
							"Farmers, Ranchers, and Other Agricultural Managers" = "11-9013",#
							"Financial Managers" = "11-3031",#
							"Food Service Managers" = "11-9051",#
							"Gaming Managers" = "11-9071",#
							"Human Resources Managers" = "11-3121",#
							"Industrial Production Managers" = "11-3051",#
							"Lodging Managers" = "11-9081",#
							"Medical and Health Services Managers" = "11-9111",#
							"Natural Sciences Managers" = "11-9121",#
							"Property, Real Estate, and Community Association Managers" = "11-9141",#
							"Public Relations and Fundraising Managers" = "11-2031",#
							"Purchasing Managers" = "11-3061",#
							"Sales Managers" = "11-2022",#
							"Social and Community Service Managers" = "11-9151",#
							"Training and Development Managers" = "11-3131"#
							),#
						selected = "11-3011"#
					)#
				)),#
			"Business and Financial Operations" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Accountants and Auditors" = "13-2011",#
							"Appraisers and Assessors of Real Estate" = "13-2021",#
							"Budget Analysts" = "13-2031",#
							"Claims Adjusters, Examiners and Investigators" = "13-1031",#
							"Compensation, Benefits, and Job Analysis Specialists" = "13-1141",#
							"Cost Estimators" = "13-1051",#
							"Financial Analysts" = "13-2051",#
							"Financial Examiners" = "13-2061",#
							"Fundraisers" = "13-1131",#
							"Insurance Underwriters" = "13-2053",#
							"Loan Officers" = "13-2072",#
							"Logisticians" = "13-1081",#
							"Management Analysts" = "13-1111",#
							"Market Research Analysts and Marketing Specialists" = "13-1161",#
							"Meeting, Convention, and Event Planners" = "13-1121",#
							"Personal Financial Advisors" = "13-2052",#
							"Tax Examiners and Collectors, and Revenue Agents" = "13-2081",#
							"Training and Development Specialists" = "13-1151"#
									),#
						selected = "13-2011"#
					)#
				)#
			),#
			"Computer and Mathematical" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Actuaries" = "15-2011",#
							"Computer and Information Research Scientists" = "15-1111",#
							"Computer Network Architects" = "15-1143",#
							"Computer Programmers" = "15-1131",#
							"Computer Systems Analysts" = "15-1121",#
							"Computer User Support Specialists" = "15-1151",#
							"Database Administrators" = "15-1141",#
							"Information Security Analysts" = "15-1122",#
							"Mathematicians" = "15-2021",#
							"Network and Computer Systems Administrators" = "15-1142",#
							"Operations Research Analysts" = "15-2031",#
							"Software Developers, Applications" = "15-1132",#
							"Statisticians" = "15-2041",#
							"Web Developers" = "15-1134"#
									),#
						selected = "15-2011"#
					)#
				)#
			),#
			"Architecture and Engineering" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Aerospace Engineering and Operations Technicians" = "17-3021",#
							"Aerospace Engineers" = "17-2011",#
							"Agricultural Engineers" = "",#
							"Architects, Except Landscape and Naval" = "17-1011",#
							"Architectural and Civil Drafters" = "17-3011",#
							"Biomedical Engineers" = "17-2031",#
							"Cartographers and Photogrammetrists" = "17-1021",#
							"Chemical Engineers" = "17-2041",#
							"Civil Engineering Technicians" = "17-3022",#
							"Civil Engineers" = "17-2051",#
							"Computer Hardware Engineers" = "17-2061",#
							"Electrical and Electronics Engineering Technicians" = "17-3023",#
							"Electrical Engineers" = "17-2071",#
							"Electro-Mechanical Technicians" = "17-3024",#
							"Environmental Engineering Technicians" = "17-3025",#
							"Environmental Engineers" = "17-2081",#
							"Health and Safety Engineers, Except Mining Safety Engineers and Inspectors" = "17-2111",#
							"Industrial Engineering Technicians" = "17-3026",#
							"Industrial Engineers" = "17-2112",#
							"Landscape Architects" = "17-1012",#
							"Marine Engineers and Naval Architects" = "17-2121",#
							"Materials Engineers" = "17-2131",#
							"Mechanical Engineering Technicians" = "17-3027",#
							"Mechanical Engineers" = "17-2141",#
							"Mining and Geological Engineers, Including Mining Safety Engineers" = "17-2151",#
							"Nuclear Engineers" = "17-2161",#
							"Petroleum Engineers" = "17-2171",#
							"Surveying and Mapping Technicians" = "17-3031",#
							"Surveyors" = "17-1022"#
									),#
						selected = "11-1011"#
					)#
				)#
			),#
			"Life, Physical and Social Science" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Agricultural and Food Science Technicians" = "19-4011",#
							"Animal Scientists" = "19-1011",#
							"Anthropologists and Archeologists" = "19-3091",#
							"Astronomers" = "19-2011",#
							"Atmospheric and Space Scientists" = "19-2021",#
							"Biochemists and Biophysicists" = "19-1021",#
							"Biological Technicians" = "19-4021",#
							"Chemical Technicians" = "19-4031",#
							"Chemists" = "19-2031",#
							"Clinical, Counseling, and School Psychologists" = "19-3031",#
							"Conservation Scientists" = "19-1031",#
							"Economists" = "19-3011",#
							"Environmental Science and Protection Technicians, Including Health" = "19-4091",#
							"Environmental Scientists and Specialists, Including Health" = "19-2041",#
							"Epidemiologists" = "19-1041",#
							"Forensic Science Technicians" = "19-4092",#
							"Forest and Conservation Technicians" = "19-4093",#
							"Geographers" = "19-3092",#
							"Geological and Petroleum Technicians" = "19-4041",#
							"Geoscientists, Except Hydrologists and Geographers" = "19-2042",#
							"Historians" = "19-3093",#
							"Hydrologists" = "19-2043",#
							"Medical Scientists, Except Epidemiologists" = "19-1042",#
							"Microbiologists" = "19-1022",#
							"Nuclear Technicians" = "19-4051",#
							"Political Scientists" = "19-3094",#
							"Sociologists" = "19-3041",#
							"Survey Researchers" = "19-3022",#
							"Urban and Regional Planners" = "19-3051",#
							"Zoologists and Wildlife Biologists" = "19-1023"#
									),#
						selected = "19-4011"#
					)#
				)#
			),#
			"Community and Social Service" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Child, Family, and School Social Workers" = "21-1021",#
							"Educational, Guidance, School, and Vocational Counselors" = "21-1012",#
							"Health Educators" = "21-1091",#
							"Marriage and Family Therapists" = "21-1013",#
							"Probation Officers and Correctional Treatment Specialists" = "21-1092",#
							"Rehabilitation Counselors" = "21-1015",#
							"Social and Human Service Assistants" = "21-1093",#
							"Substance Abuse and Behavioral Disorder Counselors" = "21-1011"#
									),#
						selected = "21-1021"#
					)#
				)#
			),#
			"Legal" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Court Reporters" = "23-2091",#
							"Lawyers" = "23-1011",#
							"Paralegals and Legal Assistants" = "23-2011"#
									),#
						selected = "11-1011"#
					)#
				)#
			),#
			"Education, Training, and Library" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Adult Basic and Secondary Education and Literacy Teachers and Instructors" = "25-3011",#
							"Archivists" = "25-4011",#
							"Instructional Coordinators" = "25-9031",#
							"Kindergarten Teachers, Except Special Education" = "25-2012",#
							"Librarians" = "25-4021",#
							"Library Technicians" = "25-4031",#
							"Middle School Teachers, Except Special/Technical Education" = "25-2022",#
							"Preschool Teachers, Except Special Education" = "25-2011",#
							"Secondary School Teachers, Except Special and Career/Technical Education" = "25-2031",#
							"Special Education Teachers, Preschool" = "25-2051",#
							"Teacher Assistants" = "25-9041",#
							"Vocational Education Teachers, Postsecondary" = "25-1194"#
									),#
						selected = "25-3011"#
					)#
				)#
			),#
			"Arts, Design, Entertainment, Sports, and Media" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Actors" = "27-2011",#
							"Art Directors" = "27-1011",#
							"Athletes and Sports Competitors" = "27-2021",#
							"Audio and Video Equipment Technicians" = "27-4011",#
							"Broadcast News Analysts" = "27-3021",#
							"Camera Operators, Television, Video, and Motion Picture" = "27-4031",#
							"Coaches and Scouts" = "27-2022",#
							"Commercial and Industrial Designers" = "27-1021",#
							"Craft Artists" = "27-1012",#
							"Dancers" = "27-2031",#
							"Editors" = "27-3041",#
							"Fashion Designers" = "27-1022",#
							"Floral Designers" = "27-1023",#
							"Graphic Designers" = "27-1024",#
							"Interior Designers" = "27-1025",#
							"Interpreters and Translators" = "27-3091",#
							"Multimedia Artists and Animators" = "27-1014",#
							"Music Directors and Composers" = "27-2041",#
							"Musicians and Singers" = "27-2042",#
							"Photographers" = "27-4021",#
							"Producers and Directors" = "27-2012",#
							"Public Relations Specialists" = "27-3031",#
							"Radio and Television Announcers" = "27-3011",#
							"Technical Writers" = "27-3042",#
							"Umpires, Referees, and Other Sports Officials" = "27-2023",#
							"Writers and Authors" = "27-3043"#
									),#
						selected = "27-2011"#
					)#
				)#
			),#
			"Healthcare Practitioners and Technical" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Anesthesiologists" = "29-1061",#
							"Athletic Trainers" = "29-9091",#
							"Audiologists" = "27-1181",#
							"Cardiovascular Technologists and Technicians" = "29-2031",#
							"Chiropractors" = "29-1011",#
							"Dental Hygienists" = "29-2021",#
							"Dentists, General" = "29-1021",#
							"Dietitians and Nutritionists" = "29-1031",#
							"Emergency Medical Technicians and Paramedics" = "29-2041",#
							"Genetic Counselors" = "29-9092",#
							"Licensed Practical and Licensed Vocational Nurses" = "29-2061",#
							"Medical and Clinical Laboratory Technologists" = "29-2011",#
							"Medical Records and Health Information Technicians" = "29-2071",#
							"Nuclear Medicine Technologists" = "29-2033",#
							"Nurse Anesthetists" = "29-1151",#
							"Occupational Health and Safety Specialists" = "29-9011",#
							"Occupational Health and Safety Technicians" = "29-9012",#
							"Occupational Therapists" = "29-1122",#
							"Opticians, Dispensing" = "29-2081",#
							"Optometrists" = "29-1041",#
							"Orthotists and Prosthetists" = "29-2091",#
							"Pharmacists" = "29-1051",#
							"Pharmacy Technicians" = "29-2052",#
							"Physical Therapists" = "29-1123",#
							"Physician Assistants" = "29-1071",#
							"Podiatrists" = "29-1081",#
							"Psychiatric Technicians" = "29-2053",#
							"Radiation Therapists" = "29-1124",#
							"Radiologic Technologists" = "29-2034",#
							"Recreational Therapists" = "29-1125",#
							"Registered Nurses" = "29-1141",#
							"Respiratory Therapists" = "29-1126",#
							"Speech-Language Pathologists" = "29-1127",#
							"Surgical Technologists" = "29-2055",#
							"Veterinarians" = "29-1131",#
							"Veterinary Technologists and Technicians" = "29-2056"#
									),#
						selected = "29-1061"#
					)#
				)#
			),#
			"Healthcare Support" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Dental Assistants" = "31-9091",#
							"Home Health Aides" = "31-1011",#
							"Massage Therapists" = "31-9011",#
							"Medical Assistants" = "31-9092",#
							"Medical Transcriptionists" = "31-9094",#
							"Nursing Assistants" = "31-1014",#
							"Occupational Therapy Assistants" = "32-2011",#
							"Physical Therapist Assistants" = "31-2021",#
							"Veterinary Assistants and Laboratory Animal Caretakers" = "31-9096"#
									),#
						selected = "31-9091"#
					)#
				)#
			),#
			"Protective Service" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Bailiffs" = "33-3011",#
							"Detectives and Criminal Investigators" = "33-3021",#
							"Fire Inspectors and Investigators" = "33-2021",#
							"Firefighters" = "33-2011",#
							"Gaming Surveillance Officers and Gaming Investigators" = "33-9031",#
							"Private Detectives and Investigators" = "33-9021"#
									),#
						selected = "33-3011"#
					)#
				)#
			),#
			"Food Preparation and Serving Related" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Bartenders" = "35-3011",#
							"Chefs and Head Cooks" = "35-1011",#
							"Combined Food Preparation and Serving Workers, Including Fast Food" = "35-3021",#
							"Cooks, Fast Food" = "35-2011",#
							"Food Preparation Workers" = "35-2021",#
							"Waiters and Waitresses" = "35-3031"#
									),#
						selected = "35-3011"#
					)#
				)#
			),#
			"Building and Grounds Cleaning and Maintenance" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "First-Line Supervisors of Landscaping, Lawn Service, and Groundskeeping Workers" = "37-1012",#
							"Janitors and Cleaners, Except Maids and Housekeeping Cleaners" = "37-2011",#
							"Maids and Housekeeping Cleaners" = "37-2012",#
							"Pest Control" = "37-2021"#
									),#
						selected = "37-1012"#
					)#
				)#
			),#
			"Personal Care and Service" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Animal Trainers" = "39-2011",#
							"Barbers" = "39-5011",#
							"Childcare Workers" = "39-9011",#
							"Fitness Trainers and Aerobics Instructors" = "39-9031",#
							"Manicurists and Pedicurists" = "39-5092",#
							"Personal Care Aides" = "39-9021",#
							"Recreation Workers" = "39-9032",#
							"Skincare Specialists" = "39-5094"#
									),#
						selected = "39-2011"#
					)#
				)#
			),#
			"Sales and Related" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Advertising Sales Agents" = "41-3011",#
							"Cashiers" = "41-2011",#
							"Insurance Sales Agents" = "41-3021",#
							"Models" = "41-9012",#
							"Parts Salespersons" = "41-2022",#
							"Real Estate Brokers" = "41-9021",#
							"Sales Engineers" = "41-9031",#
							"Sales Representatives, Wholesale and Manufacturing, Technical and Scientific Products" = "41-4011",#
							"Securities, Commodities, and Financial Services Sales Agents" = "41-3031",#
							"Travel Agents" = "41-3041"#
									),#
						selected = "41-3011"#
					)#
				)#
			),#
			"Office and Administrative Support" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Bill and Account Collectors" = "43-3011",#
							"Billing and Posting Clerks" = "43-3021",#
							"Bookkeeping, Accounting, and Auditing Clerks" = "43-3031",#
							"Correspondence Clerks" = "43-4021",#
							"Customer Service Representatives" = "43-4051",#
							"Desktop Publishers" = "43-9031",#
							"Executive Secretaries and Executive Administrative Assistants" = "43-6011",#
							"Office Clerks, General" = "43-9061",#
							"Police, Fire, and Ambulance Dispatchers" = "43-5031",#
							"Postal Service Clerks" = "43-5051",#
							"Production, Planning, and Expediting Clerks" = "43-5061",#
							"Receptionists and Information Clerks" = "43-4171",#
							"Tellers" = "43-3071"#
									),#
						selected = "43-3011"#
					)#
				)#
			),#
			"Farming, Fishing, and Forestry" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Animal Breeders" = "45-2021",#
							"Fallers" = "45-4021",#
							"Fishers and Related Fishing Workers" = "45-3011",#
							"Forest and Conservation Workers" = "45-4011"#
									),#
						selected = "45-4011"#
					)#
				)#
			),#
			"Construction and Extraction" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Boilermakers" = "47-2011",#
							"Brickmasons and Blockmasons" = "47-2021",#
							"Carpenters" = "47-2037",#
							"Cement Masons and Concrete Finishers" = "47-2051",#
							"Construction and Building Inspectors" = "47-4011",#
							"Construction Laborers" = "47-2061",#
							"Drywall and Ceiling Tile Installers" = "47-2081",#
							"Electricians" = "47-2111",#
							"Elevator Installers and Repairers" = "47-4021",#
							"Glaziers" = "47-2121",#
							"Hazardous Materials Removal Workers" = "47-4041",#
							"Insulation Workers, Floor, Ceiling, and Wall" = "47-2131",#
							"Painters, Construction and Maintenance" = "47-2141",#
							"Paving, Surfacing, and Tamping Equipment Operators" = "47-2071",#
							"Plumbers, Pipefitters, and Steamfitters" = "47-2152",#
							"Roofers" = "47-2181",#
							"Sheet Metal Workers" = "47-2211",#
							"Solar Photovoltaic Installers" = "47-2231",#
							"Structural Iron and Steel Workers" = "47-2221",#
							"Tile and Marble Setters" = "47-2044"#
									),#
						selected = "47-2011"#
					)#
				)#
			),#
			"Installation, Maintenance, and Repair" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Automotive Body and Related Repairers" = "49-3021",#
							"Automotive Service Technicians and Mechanics" = "49-3023",#
							"Avionics Technicians" = "49-2091",#
							"Bus and Truck Mechanics and Diesel Engine Specialists" = "49-3031",#
							"Computer, Automated Teller, and Office Machine Repairers" = "49-2011",#
							"Electric Motor, Power Tool, and Related Repairers" = "49-2092",#
							"Electrical Power-Line Installers and Repairers" = "49-9051",#
							"Farm Equipment Mechanics and Service Technicians" = "49-3041",#
							"Heating, Air Conditioning, and Refrigeration Mechanics and Installers" = "49-9021",#
							"Industiral Machinery Mechanics" = "49-9041",#
							"Maintenance and Repair Workers, General" = "49-9071",#
							"Medical Equipment Repairers" = "49-9062",#
							"Motorboat Mechanics and Service Technicians" = "49-3051",#
							"Telecommunications Equipment Installers and Repairers, Except Line Installers" = "49-2022",#
							"Wind Turbine Service Technicians" = "49-9081"#
									),#
						selected = "49-3021"#
					)#
				)#
			),#
			"Production" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Aircraft Structure, Surfaces, Rigging, and Systems Assembers" = "51-2011",#
							"Bakers" = "51-2011",#
							"Butchers and Meat Cutters" = "51-3021",#
							"Cabinetmakers and Bench Carpenters" = "51-7011",#
							"Coating, Painting, and Spraying Machine Setters, Operators, and Tenders" = "51-9121",#
							"Computer-Controlled Machine Tool Operators, Metal and Plastic" = "51-4011",#
							"Dental Laboratory Technicians" = "51-9081",#
							"Food and Tobacco Roasting, Baking, and Drying Machine Operators and Tenders" = "51-3091",#
							"Inspectors, Testers, Sorters, Samplers, and Weighers" = "51-9061",#
							"Jewelers and Precious Stone and Metal Workers" = "51-9071",#
							"Laundry and Dry-Cleaning Workers" = "51-6011",#
							"Machinists" = "51-4041",#
							"Nuclear Power Reactor Operators" = "51-8011",#
							"Prepress Technicians and Workers" = "51-5111",#
							"Semiconductor Processors" = "51-9141",#
							"Slaughterers and Meat Packers" = "51-3023",#
							"Stationany Engineers and Boiler Operators" = "51-8021",#
							"Water and Wastewater Treatment Plant and System Operators" = "51-8031",#
							"Welders, Cutters, Solderers, and Brazers" = "51-4121"#
									),#
						selected = "51-2011"#
					)#
				)#
			),#
			"Transporation and Material Moving" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("treeocc", h5("Select Profession"),#
						choices = c("All Professions" = "99-9999", "Air Traffic Controllers" = "53-2021",#
							"Airline Pilots, Copilots, and Flight Engineers" = "53-2011",#
							"Bus Drivers, Transit and Intercity" = "53-3021",#
							"Cleaners of Vehicles and Equipment" = "53-7061",#
							"Conveyor Operators and Tenders" = "53-7011",#
							"Driver/Sales Workers" = "53-3031",#
							"Flight Attendants" = "53-2031",#
							"Heavy and Tractor-Trailer Truck Drivers" = "53-3032",#
							"Locomotive Engineers" = "53-4011",#
							"Sailers and Marine Oilers" = "53-5011",#
							"Taxi Drivers and Chauffeurs" = "53-3041"#
									),#
						selected = "11-1011"#
					)#
				)#
			)#
		)#
	})#
#
	output$localui <- renderUI({#
		if (is.null(input$local_ind))#
			return()#
		switch(input$local_ind,#
			"Management" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Administrative Service Managers" = "11-3011",#
							"Advertising and Promotions Managers" = "11-2011",#
							"Architectural and Engineering Managers" = "11-9041",#
							"Chief Executives" = "11-1011",#
							"Compensation and Benefits Managers" = "11-3111",#
							"Computer and Information Systems Managers" = "11-3021",#
							"Construction Managers" = "11-9021",#
							"Education Administrators, Elementary and Secondary School" = "11-9032",#
							"Educaiton Administrators, Postsecondary" = "11-9033",#
							"Education Administrators, Preschool and Childcare Center/Program" = "11-9031",#
							"Farmers, Ranchers, and Other Agricultural Managers" = "11-9013",#
							"Financial Managers" = "11-3031",#
							"Food Service Managers" = "11-9051",#
							"Gaming Managers" = "11-9071",#
							"Human Resources Managers" = "11-3121",#
							"Industrial Production Managers" = "11-3051",#
							"Lodging Managers" = "11-9081",#
							"Medical and Health Services Managers" = "11-9111",#
							"Natural Sciences Managers" = "11-9121",#
							"Property, Real Estate, and Community Association Managers" = "11-9141",#
							"Public Relations and Fundraising Managers" = "11-2031",#
							"Purchasing Managers" = "11-3061",#
							"Sales Managers" = "11-2022",#
							"Social and Community Service Managers" = "11-9151",#
							"Training and Development Managers" = "11-3131"#
							),#
						selected = "11-3011"#
					)#
				)),#
			"Business and Financial Operations" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Accountants and Auditors" = "13-2011",#
							"Appraisers and Assessors of Real Estate" = "13-2021",#
							"Budget Analysts" = "13-2031",#
							"Claims Adjusters, Examiners and Investigators" = "13-1031",#
							"Compensation, Benefits, and Job Analysis Specialists" = "13-1141",#
							"Cost Estimators" = "13-1051",#
							"Financial Analysts" = "13-2051",#
							"Financial Examiners" = "13-2061",#
							"Fundraisers" = "13-1131",#
							"Insurance Underwriters" = "13-2053",#
							"Loan Officers" = "13-2072",#
							"Logisticians" = "13-1081",#
							"Management Analysts" = "13-1111",#
							"Market Research Analysts and Marketing Specialists" = "13-1161",#
							"Meeting, Convention, and Event Planners" = "13-1121",#
							"Personal Financial Advisors" = "13-2052",#
							"Tax Examiners and Collectors, and Revenue Agents" = "13-2081",#
							"Training and Development Specialists" = "13-1151"#
									),#
						selected = "13-2011"#
					)#
				)#
			),#
			"Computer and Mathematical" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Actuaries" = "15-2011",#
							"Computer and Information Research Scientists" = "15-1111",#
							"Computer Network Architects" = "15-1143",#
							"Computer Programmers" = "15-1131",#
							"Computer Systems Analysts" = "15-1121",#
							"Computer User Support Specialists" = "15-1151",#
							"Database Administrators" = "15-1141",#
							"Information Security Analysts" = "15-1122",#
							"Mathematicians" = "15-2021",#
							"Network and Computer Systems Administrators" = "15-1142",#
							"Operations Research Analysts" = "15-2031",#
							"Software Developers, Applications" = "15-1132",#
							"Statisticians" = "15-2041",#
							"Web Developers" = "15-1134"#
									),#
						selected = "15-2011"#
					)#
				)#
			),#
			"Architecture and Engineering" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Aerospace Engineering and Operations Technicians" = "17-3021",#
							"Aerospace Engineers" = "17-2011",#
							"Agricultural Engineers" = "",#
							"Architects, Except Landscape and Naval" = "17-1011",#
							"Architectural and Civil Drafters" = "17-3011",#
							"Biomedical Engineers" = "17-2031",#
							"Cartographers and Photogrammetrists" = "17-1021",#
							"Chemical Engineers" = "17-2041",#
							"Civil Engineering Technicians" = "17-3022",#
							"Civil Engineers" = "17-2051",#
							"Computer Hardware Engineers" = "17-2061",#
							"Electrical and Electronics Engineering Technicians" = "17-3023",#
							"Electrical Engineers" = "17-2071",#
							"Electro-Mechanical Technicians" = "17-3024",#
							"Environmental Engineering Technicians" = "17-3025",#
							"Environmental Engineers" = "17-2081",#
							"Health and Safety Engineers, Except Mining Safety Engineers and Inspectors" = "17-2111",#
							"Industrial Engineering Technicians" = "17-3026",#
							"Industrial Engineers" = "17-2112",#
							"Landscape Architects" = "17-1012",#
							"Marine Engineers and Naval Architects" = "17-2121",#
							"Materials Engineers" = "17-2131",#
							"Mechanical Engineering Technicians" = "17-3027",#
							"Mechanical Engineers" = "17-2141",#
							"Mining and Geological Engineers, Including Mining Safety Engineers" = "17-2151",#
							"Nuclear Engineers" = "17-2161",#
							"Petroleum Engineers" = "17-2171",#
							"Surveying and Mapping Technicians" = "17-3031",#
							"Surveyors" = "17-1022"#
									),#
						selected = "11-1011"#
					)#
				)#
			),#
			"Life, Physical and Social Science" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Agricultural and Food Science Technicians" = "19-4011",#
							"Animal Scientists" = "19-1011",#
							"Anthropologists and Archeologists" = "19-3091",#
							"Astronomers" = "19-2011",#
							"Atmospheric and Space Scientists" = "19-2021",#
							"Biochemists and Biophysicists" = "19-1021",#
							"Biological Technicians" = "19-4021",#
							"Chemical Technicians" = "19-4031",#
							"Chemists" = "19-2031",#
							"Clinical, Counseling, and School Psychologists" = "19-3031",#
							"Conservation Scientists" = "19-1031",#
							"Economists" = "19-3011",#
							"Environmental Science and Protection Technicians, Including Health" = "19-4091",#
							"Environmental Scientists and Specialists, Including Health" = "19-2041",#
							"Epidemiologists" = "19-1041",#
							"Forensic Science Technicians" = "19-4092",#
							"Forest and Conservation Technicians" = "19-4093",#
							"Geographers" = "19-3092",#
							"Geological and Petroleum Technicians" = "19-4041",#
							"Geoscientists, Except Hydrologists and Geographers" = "19-2042",#
							"Historians" = "19-3093",#
							"Hydrologists" = "19-2043",#
							"Medical Scientists, Except Epidemiologists" = "19-1042",#
							"Microbiologists" = "19-1022",#
							"Nuclear Technicians" = "19-4051",#
							"Political Scientists" = "19-3094",#
							"Sociologists" = "19-3041",#
							"Survey Researchers" = "19-3022",#
							"Urban and Regional Planners" = "19-3051",#
							"Zoologists and Wildlife Biologists" = "19-1023"#
									),#
						selected = "19-4011"#
					)#
				)#
			),#
			"Community and Social Service" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Child, Family, and School Social Workers" = "21-1021",#
							"Educational, Guidance, School, and Vocational Counselors" = "21-1012",#
							"Health Educators" = "21-1091",#
							"Marriage and Family Therapists" = "21-1013",#
							"Probation Officers and Correctional Treatment Specialists" = "21-1092",#
							"Rehabilitation Counselors" = "21-1015",#
							"Social and Human Service Assistants" = "21-1093",#
							"Substance Abuse and Behavioral Disorder Counselors" = "21-1011"#
									),#
						selected = "21-1021"#
					)#
				)#
			),#
			"Legal" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Court Reporters" = "23-2091",#
							"Lawyers" = "23-1011",#
							"Paralegals and Legal Assistants" = "23-2011"#
									),#
						selected = "11-1011"#
					)#
				)#
			),#
			"Education, Training, and Library" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Adult Basic and Secondary Education and Literacy Teachers and Instructors" = "25-3011",#
							"Archivists" = "25-4011",#
							"Instructional Coordinators" = "25-9031",#
							"Kindergarten Teachers, Except Special Education" = "25-2012",#
							"Librarians" = "25-4021",#
							"Library Technicians" = "25-4031",#
							"Middle School Teachers, Except Special/Technical Education" = "25-2022",#
							"Preschool Teachers, Except Special Education" = "25-2011",#
							"Secondary School Teachers, Except Special and Career/Technical Education" = "25-2031",#
							"Special Education Teachers, Preschool" = "25-2051",#
							"Teacher Assistants" = "25-9041",#
							"Vocational Education Teachers, Postsecondary" = "25-1194"#
									),#
						selected = "25-3011"#
					)#
				)#
			),#
			"Arts, Design, Entertainment, Sports, and Media" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Actors" = "27-2011",#
							"Art Directors" = "27-1011",#
							"Athletes and Sports Competitors" = "27-2021",#
							"Audio and Video Equipment Technicians" = "27-4011",#
							"Broadcast News Analysts" = "27-3021",#
							"Camera Operators, Television, Video, and Motion Picture" = "27-4031",#
							"Coaches and Scouts" = "27-2022",#
							"Commercial and Industrial Designers" = "27-1021",#
							"Craft Artists" = "27-1012",#
							"Dancers" = "27-2031",#
							"Editors" = "27-3041",#
							"Fashion Designers" = "27-1022",#
							"Floral Designers" = "27-1023",#
							"Graphic Designers" = "27-1024",#
							"Interior Designers" = "27-1025",#
							"Interpreters and Translators" = "27-3091",#
							"Multimedia Artists and Animators" = "27-1014",#
							"Music Directors and Composers" = "27-2041",#
							"Musicians and Singers" = "27-2042",#
							"Photographers" = "27-4021",#
							"Producers and Directors" = "27-2012",#
							"Public Relations Specialists" = "27-3031",#
							"Radio and Television Announcers" = "27-3011",#
							"Technical Writers" = "27-3042",#
							"Umpires, Referees, and Other Sports Officials" = "27-2023",#
							"Writers and Authors" = "27-3043"#
									),#
						selected = "27-2011"#
					)#
				)#
			),#
			"Healthcare Practitioners and Technical" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Anesthesiologists" = "29-1061",#
							"Athletic Trainers" = "29-9091",#
							"Audiologists" = "27-1181",#
							"Cardiovascular Technologists and Technicians" = "29-2031",#
							"Chiropractors" = "29-1011",#
							"Dental Hygienists" = "29-2021",#
							"Dentists, General" = "29-1021",#
							"Dietitians and Nutritionists" = "29-1031",#
							"Emergency Medical Technicians and Paramedics" = "29-2041",#
							"Genetic Counselors" = "29-9092",#
							"Licensed Practical and Licensed Vocational Nurses" = "29-2061",#
							"Medical and Clinical Laboratory Technologists" = "29-2011",#
							"Medical Records and Health Information Technicians" = "29-2071",#
							"Nuclear Medicine Technologists" = "29-2033",#
							"Nurse Anesthetists" = "29-1151",#
							"Occupational Health and Safety Specialists" = "29-9011",#
							"Occupational Health and Safety Technicians" = "29-9012",#
							"Occupational Therapists" = "29-1122",#
							"Opticians, Dispensing" = "29-2081",#
							"Optometrists" = "29-1041",#
							"Orthotists and Prosthetists" = "29-2091",#
							"Pharmacists" = "29-1051",#
							"Pharmacy Technicians" = "29-2052",#
							"Physical Therapists" = "29-1123",#
							"Physician Assistants" = "29-1071",#
							"Podiatrists" = "29-1081",#
							"Psychiatric Technicians" = "29-2053",#
							"Radiation Therapists" = "29-1124",#
							"Radiologic Technologists" = "29-2034",#
							"Recreational Therapists" = "29-1125",#
							"Registered Nurses" = "29-1141",#
							"Respiratory Therapists" = "29-1126",#
							"Speech-Language Pathologists" = "29-1127",#
							"Surgical Technologists" = "29-2055",#
							"Veterinarians" = "29-1131",#
							"Veterinary Technologists and Technicians" = "29-2056"#
									),#
						selected = "29-1061"#
					)#
				)#
			),#
			"Healthcare Support" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Dental Assistants" = "31-9091",#
							"Home Health Aides" = "31-1011",#
							"Massage Therapists" = "31-9011",#
							"Medical Assistants" = "31-9092",#
							"Medical Transcriptionists" = "31-9094",#
							"Nursing Assistants" = "31-1014",#
							"Occupational Therapy Assistants" = "32-2011",#
							"Physical Therapist Assistants" = "31-2021",#
							"Veterinary Assistants and Laboratory Animal Caretakers" = "31-9096"#
									),#
						selected = "31-9091"#
					)#
				)#
			),#
			"Protective Service" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Bailiffs" = "33-3011",#
							"Detectives and Criminal Investigators" = "33-3021",#
							"Fire Inspectors and Investigators" = "33-2021",#
							"Firefighters" = "33-2011",#
							"Gaming Surveillance Officers and Gaming Investigators" = "33-9031",#
							"Private Detectives and Investigators" = "33-9021"#
									),#
						selected = "33-3011"#
					)#
				)#
			),#
			"Food Preparation and Serving Related" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Bartenders" = "35-3011",#
							"Chefs and Head Cooks" = "35-1011",#
							"Combined Food Preparation and Serving Workers, Including Fast Food" = "35-3021",#
							"Cooks, Fast Food" = "35-2011",#
							"Food Preparation Workers" = "35-2021",#
							"Waiters and Waitresses" = "35-3031"#
									),#
						selected = "35-3011"#
					)#
				)#
			),#
			"Building and Grounds Cleaning and Maintenance" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("First-Line Supervisors of Landscaping, Lawn Service, and Groundskeeping Workers" = "37-1012",#
							"Janitors and Cleaners, Except Maids and Housekeeping Cleaners" = "37-2011",#
							"Maids and Housekeeping Cleaners" = "37-2012",#
							"Pest Control" = "37-2021"#
									),#
						selected = "37-1012"#
					)#
				)#
			),#
			"Personal Care and Service" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Animal Trainers" = "39-2011",#
							"Barbers" = "39-5011",#
							"Childcare Workers" = "39-9011",#
							"Fitness Trainers and Aerobics Instructors" = "39-9031",#
							"Manicurists and Pedicurists" = "39-5092",#
							"Personal Care Aides" = "39-9021",#
							"Recreation Workers" = "39-9032",#
							"Skincare Specialists" = "39-5094"#
									),#
						selected = "39-2011"#
					)#
				)#
			),#
			"Sales and Related" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Advertising Sales Agents" = "41-3011",#
							"Cashiers" = "41-2011",#
							"Insurance Sales Agents" = "41-3021",#
							"Models" = "41-9012",#
							"Parts Salespersons" = "41-2022",#
							"Real Estate Brokers" = "41-9021",#
							"Sales Engineers" = "41-9031",#
							"Sales Representatives, Wholesale and Manufacturing, Technical and Scientific Products" = "41-4011",#
							"Securities, Commodities, and Financial Services Sales Agents" = "41-3031",#
							"Travel Agents" = "41-3041"#
									),#
						selected = "41-3011"#
					)#
				)#
			),#
			"Office and Administrative Support" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Bill and Account Collectors" = "43-3011",#
							"Billing and Posting Clerks" = "43-3021",#
							"Bookkeeping, Accounting, and Auditing Clerks" = "43-3031",#
							"Correspondence Clerks" = "43-4021",#
							"Customer Service Representatives" = "43-4051",#
							"Desktop Publishers" = "43-9031",#
							"Executive Secretaries and Executive Administrative Assistants" = "43-6011",#
							"Office Clerks, General" = "43-9061",#
							"Police, Fire, and Ambulance Dispatchers" = "43-5031",#
							"Postal Service Clerks" = "43-5051",#
							"Production, Planning, and Expediting Clerks" = "43-5061",#
							"Receptionists and Information Clerks" = "43-4171",#
							"Tellers" = "43-3071"#
									),#
						selected = "43-3011"#
					)#
				)#
			),#
			"Farming, Fishing, and Forestry" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Animal Breeders" = "45-2021",#
							"Fallers" = "45-4021",#
							"Fishers and Related Fishing Workers" = "45-3011",#
							"Forest and Conservation Workers" = "45-4011"#
									),#
						selected = "45-4011"#
					)#
				)#
			),#
			"Construction and Extraction" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Boilermakers" = "47-2011",#
							"Brickmasons and Blockmasons" = "47-2021",#
							"Carpenters" = "47-2037",#
							"Cement Masons and Concrete Finishers" = "47-2051",#
							"Construction and Building Inspectors" = "47-4011",#
							"Construction Laborers" = "47-2061",#
							"Drywall and Ceiling Tile Installers" = "47-2081",#
							"Electricians" = "47-2111",#
							"Elevator Installers and Repairers" = "47-4021",#
							"Glaziers" = "47-2121",#
							"Hazardous Materials Removal Workers" = "47-4041",#
							"Insulation Workers, Floor, Ceiling, and Wall" = "47-2131",#
							"Painters, Construction and Maintenance" = "47-2141",#
							"Paving, Surfacing, and Tamping Equipment Operators" = "47-2071",#
							"Plumbers, Pipefitters, and Steamfitters" = "47-2152",#
							"Roofers" = "47-2181",#
							"Sheet Metal Workers" = "47-2211",#
							"Solar Photovoltaic Installers" = "47-2231",#
							"Structural Iron and Steel Workers" = "47-2221",#
							"Tile and Marble Setters" = "47-2044"#
									),#
						selected = "47-2011"#
					)#
				)#
			),#
			"Installation, Maintenance, and Repair" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Automotive Body and Related Repairers" = "49-3021",#
							"Automotive Service Technicians and Mechanics" = "49-3023",#
							"Avionics Technicians" = "49-2091",#
							"Bus and Truck Mechanics and Diesel Engine Specialists" = "49-3031",#
							"Computer, Automated Teller, and Office Machine Repairers" = "49-2011",#
							"Electric Motor, Power Tool, and Related Repairers" = "49-2092",#
							"Electrical Power-Line Installers and Repairers" = "49-9051",#
							"Farm Equipment Mechanics and Service Technicians" = "49-3041",#
							"Heating, Air Conditioning, and Refrigeration Mechanics and Installers" = "49-9021",#
							"Industiral Machinery Mechanics" = "49-9041",#
							"Maintenance and Repair Workers, General" = "49-9071",#
							"Medical Equipment Repairers" = "49-9062",#
							"Motorboat Mechanics and Service Technicians" = "49-3051",#
							"Telecommunications Equipment Installers and Repairers, Except Line Installers" = "49-2022",#
							"Wind Turbine Service Technicians" = "49-9081"#
									),#
						selected = "49-3021"#
					)#
				)#
			),#
			"Production" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Aircraft Structure, Surfaces, Rigging, and Systems Assembers" = "51-2011",#
							"Bakers" = "51-2011",#
							"Butchers and Meat Cutters" = "51-3021",#
							"Cabinetmakers and Bench Carpenters" = "51-7011",#
							"Coating, Painting, and Spraying Machine Setters, Operators, and Tenders" = "51-9121",#
							"Computer-Controlled Machine Tool Operators, Metal and Plastic" = "51-4011",#
							"Dental Laboratory Technicians" = "51-9081",#
							"Food and Tobacco Roasting, Baking, and Drying Machine Operators and Tenders" = "51-3091",#
							"Inspectors, Testers, Sorters, Samplers, and Weighers" = "51-9061",#
							"Jewelers and Precious Stone and Metal Workers" = "51-9071",#
							"Laundry and Dry-Cleaning Workers" = "51-6011",#
							"Machinists" = "51-4041",#
							"Nuclear Power Reactor Operators" = "51-8011",#
							"Prepress Technicians and Workers" = "51-5111",#
							"Semiconductor Processors" = "51-9141",#
							"Slaughterers and Meat Packers" = "51-3023",#
							"Stationany Engineers and Boiler Operators" = "51-8021",#
							"Water and Wastewater Treatment Plant and System Operators" = "51-8031",#
							"Welders, Cutters, Solderers, and Brazers" = "51-4121"#
									),#
						selected = "51-2011"#
					)#
				)#
			),#
			"Transporation and Material Moving" = fluidRow(#
				column(12,#
					# br(),#
					selectInput("occ", h5("Select Profession"),#
						choices = c("Air Traffic Controllers" = "53-2021",#
							"Airline Pilots, Copilots, and Flight Engineers" = "53-2011",#
							"Bus Drivers, Transit and Intercity" = "53-3021",#
							"Cleaners of Vehicles and Equipment" = "53-7061",#
							"Conveyor Operators and Tenders" = "53-7011",#
							"Driver/Sales Workers" = "53-3031",#
							"Flight Attendants" = "53-2031",#
							"Heavy and Tractor-Trailer Truck Drivers" = "53-3032",#
							"Locomotive Engineers" = "53-4011",#
							"Sailers and Marine Oilers" = "53-5011",#
							"Taxi Drivers and Chauffeurs" = "53-3041"#
									),#
						selected = "11-1011"#
					)#
					# includeHTML("aboutmultiline.html")#
				)#
				)#
		)#
	})#
	getdataindclassvar <- reactive({#
		results <- input$dataindclassvar#
		return(results)#
	})#
	getdatatype <- reactive({#
		results <- input$dataplotbutton#
		return(results)#
	})#
	getaddstates <- reactive({#
			results<- input$addstates#
			return(results)#
		})#
	getaddprofs <- reactive({#
			results<- input$addprofs#
			return(results)#
	})#
	getindustry <- reactive({#
		results <- input$input_type#
		return(results)#
	})#
	getoverviewind <- reactive({#
		results <- input$input_industry#
		return(results)#
	})#
	getoverview <- reactive({#
		results <- input$radio_overview#
		return(results)#
	})#
	gettreedf <- reactive({#
		if(input$tree_df=="National") {#
			results <- oohoesnat#
		}#
		if(input$tree_df=="State") {#
			results <- oohoesstate#
		}#
		if(input$tree_df=="Industry") {#
			results <- oohoesstate#
		}#
		if(input$tree_df=="Profession") {#
			results <- oohoesstate#
		}#
		return(results)#
	})#
	gettreeind <- reactive({#
		results <- input$tree_industry#
		return(results)#
	})#
	gettreetype <- reactive({#
		results <- input$tree_df#
		return(results)#
	})#
	gettreestate <- reactive({#
		results <- input$tree_state#
		return(results)#
	})#
	gettreecategory <- reactive({#
		results <- input$tree_category#
		return(results)#
	})#
	gettreescale <- reactive({#
		results <- input$tree_scale#
		return(results)#
	})#
	gettreeocc <- reactive({#
		results <- input$treeocc#
		return(results)#
	})#
#
	getlocalind <- reactive ({#
		results <- input$local_ind#
		return(results)#
	})#
	getocc <- reactive ({#
		results <- input$occ#
		return(results)#
	})#
	getstate <- reactive ({#
		results <- input$state_select#
		return(results)#
	})#
	gettsort <- reactive ({#
		results <- input$table_sort#
		return(results)#
	})#
	gettableoverview <- reactive ({#
		results <- input$tableoverview_sort#
		return(results)#
	})#
	getdorpplot <- reactive ({#
		results <- input$dorpplot#
		return(results)#
	})#
	getdorpplotlocal <- reactive ({#
		results <- input$dorpplotlocal#
		return(results)#
	})#
	getlat <- reactive ({#
		results <- input$latnudge#
		return(results)#
	})#
	output$dataplotResults <- renderPlot ({#
		dataplotResults <- dataplot_function(oohoesmetrogeo, getdatatype(),#
		getdataindclassvar(), getaddstates(), getaddprofs())#
		print(dataplotResults)#
	}, width = 700, height = 600)#
#
	output$textResults <- renderText ({#
		textResults <- text_function(oohoesmetrogeo, getocc())#
	})#
	output$tableResults <- renderTable ({#
		tableResults <- table_function(oohoesmetrogeo, getocc(), getstate(),#
			gettsort())#
	})#
#
	output$natplotResults <- renderPlot ({#
		natplotResults <- natplot_function(oohoesmetrogeo, getindustry(),#
		getdorpplot())#
		print(natplotResults)#
	}, width = 700, height = 600)#
#
	output$natoverviewResults <- renderPlot ({#
		natoverviewResults <- natwage_function(oesnatgroup,#
			getoverviewind(), getoverview())#
		print(natoverviewResults)#
	}, width = 700, height = 600)#
#
	output$overviewstatsResults <- renderTable ({#
		overviewstatsResults <- overviewstats_function(oohoesnat,#
		oesnatgroup, getoverviewind())#
	})#
#
	output$tableoverviewResults <- renderTable ({#
		tableoverviewResults <- table_overviewfunction(oesnatgroup,#
		gettableoverview())#
	})#
#
	output$treeResults <- renderPlot ({#
		treeResults <- tree_function(gettreedf(), gettreetype(),#
		gettreeind(), gettreestate(), gettreecategory(),#
			gettreescale(), gettreeocc())#
		print(treeResults)#
	}, width = 700, height = 600)#
#
	output$localplotResults <- renderPlot ({#
		localplotResults <- plot_function(oohoesmetrogeo,#
			getlocalind(), getocc(), getstate(), getvar(),#
			stateneighbors, getdorpplotlocal())#
		print(localplotResults)#
	}, width = 700, height = 600)#
})
runApp()
runApp()
